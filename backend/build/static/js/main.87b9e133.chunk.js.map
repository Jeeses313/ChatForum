{"version":3,"sources":["queries/userqueries.js","reducers/notificationReducer.js","components/Notification.js","reducers/tokenReducer.js","reducers/userReducer.js","components/LoginForm.js","components/Navigationbar.js","queries/chatqueries.js","queries/commentqueries.js","components/Chat.js","components/ChatForm.js","components/ChatsPage.js","components/Comment.js","components/CommentForm.js","components/ChatPage.js","components/LoggedInPage.js","components/SigninForm.js","App.js","store.js","index.js"],"names":["timeout","LOGIN","gql","SIGNIN","Notification","notification","useSelector","state","error","Alert","variant","className","message","setNotification","time","dispatch","a","clearTimeout","setTimeout","type","reducer","action","setToken","token","data","setUser","user","LoginForm","useState","username","setUsername","password","setPassword","useDispatch","history","useHistory","useMutation","onError","graphQLErrors","login","result","useEffect","value","localStorage","setItem","push","JSON","stringify","Form","onSubmit","event","preventDefault","variables","Label","Control","id","name","onChange","target","required","Button","to","Navigationbar","Navbar","collapseOnSelect","expand","bg","Brand","href","as","Toggle","aria-controls","Collapse","Nav","Link","onClick","window","removeItem","CREATE_CHAT","CHATS","CHAT_ADDED","CREATE_COMMENT","COMMENTS","COMMENT_ADDED","Chat","chat","latestComment","options","weekday","year","month","day","hour","minute","date","Date","toLocaleTimeString","content","length","substring","style","borderStyle","borderRadius","padding","marginBottom","title","ChatForm","setTitle","create","createChat","chatTitle","Row","size","Col","md","rows","resize","placeholder","block","ChatsPage","chats","setChats","useLazyQuery","loadChats","chatsResult","sort","chatA","chatB","dateA","dateB","useSubscription","onSubscriptionData","newChat","subscriptionData","chatAdded","newChats","concat","newComment","commentAdded","comment","map","borderColor","overflowY","height","key","Comment","readOnly","width","border","CommentForm","setContent","send","ChatPage","comments","setComments","loadComments","commentsResult","match","useRouteMatch","params","commentsEndRef","useRef","commentA","commentB","current","scrollIntoView","behavior","newComments","ref","LoggedInPage","path","SigninForm","signin","createUser","App","combineReducers","notificationReducer","userReducer","tokenReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","authLink","setContext","_","headers","getItem","authorization","httpLink","HttpLink","uri","wsLink","WebSocketLink","location","host","reconnect","splitLink","split","query","definition","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","link","defaultOptions","watchQuery","fetchPolicy","loggedToken","loggedUser","parse","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.87b9e133.chunk.js","sourcesContent":["import { gql } from '@apollo/client'\r\n\r\nexport const LOGIN = gql`\r\n    mutation login($username: String!, $password: String!) {\r\n        login(username: $username, password: $password)  {\r\n            value\r\n            user {\r\n                username\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const SIGNIN = gql`\r\n    mutation createUser($username: String!, $password: String!) {\r\n        createUser(username: $username, password: $password)  {\r\n            value\r\n            user {\r\n                username\r\n            }\r\n        }\r\n    }\r\n`","const reducer = (state = '', action) => {\r\n    switch (action.type) {\r\n        case 'SET NOTIFICATION': {\r\n            return action.notification\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nlet timeout\r\n\r\nexport const setNotification = (notification, time) => {\r\n    return async dispatch => {\r\n        if (notification !== '') {\r\n            clearTimeout(timeout)\r\n            timeout = setTimeout(() => {\r\n                dispatch(setNotification(''))\r\n            }, time * 1000)\r\n        }\r\n        dispatch({\r\n            type: 'SET NOTIFICATION',\r\n            notification: notification\r\n        })\r\n    }\r\n}\r\n\r\nexport default reducer","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Alert } from 'react-bootstrap'\r\n\r\nconst Notification = () => {\r\n    const notification = useSelector(state => state.notification)\r\n\r\n    if (notification === '') {\r\n        return (\r\n            <></>\r\n        )\r\n    }\r\n    if (notification.error) {\r\n        return (\r\n            <Alert variant=\"danger\" className='errormessage'>{notification.message}</Alert>\r\n        )\r\n    }\r\n    return (\r\n        <Alert variant=\"success\" className='message'>{notification.message}</Alert>\r\n    )\r\n}\r\n\r\nexport default Notification","const reducer = (state = null, action) => {\r\n    switch (action.type) {\r\n        case 'SET_TOKEN': {\r\n            return action.data\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const setToken = (token) => {\r\n    return async dispatch => {\r\n        dispatch({\r\n            type: 'SET_TOKEN',\r\n            data: token\r\n        })\r\n    }\r\n}\r\n\r\nexport default reducer","const reducer = (state = null, action) => {\r\n    switch (action.type) {\r\n        case 'SET_USER': {\r\n            return action.data\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const setUser = (user) => {\r\n    return async dispatch => {\r\n\r\n        dispatch({\r\n            type: 'SET_USER',\r\n            data: user\r\n        })\r\n    }\r\n}\r\n\r\nexport default reducer","import React, { useState, useEffect } from 'react'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { useMutation } from '@apollo/client'\r\nimport { LOGIN } from '../queries/userqueries'\r\nimport Notification from './Notification'\r\nimport { setNotification } from '../reducers/notificationReducer'\r\nimport { setToken } from '../reducers/tokenReducer'\r\nimport { setUser } from '../reducers/userReducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useHistory, Link } from 'react-router-dom'\r\n\r\nconst LoginForm = () => {\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const [login, result] = useMutation(LOGIN, {\r\n        onError: (error) => {\r\n            dispatch(setNotification({ message: error.graphQLErrors[0].message, error: true }, 10))\r\n        }\r\n    })\r\n    useEffect(() => {\r\n        if (result.data) {\r\n            const token = result.data.login.value\r\n            const user = result.data.login.user\r\n            dispatch(setToken(token))\r\n            localStorage.setItem('user-token', token)\r\n            history.push('/')\r\n            localStorage.setItem('logged-user', JSON.stringify(user))\r\n            dispatch(setUser(user))\r\n            dispatch(setNotification({ message: 'Logged in', error: false }, 10))\r\n        }\r\n    }, [result.data]) // eslint-disable-line\r\n    const submit = (event) => {\r\n        event.preventDefault()\r\n        login({ variables: { username, password } })\r\n        setUsername('')\r\n        setPassword('')\r\n    }\r\n\r\n    return (\r\n        <div className='container'>\r\n            <h2>Login</h2>\r\n            <Notification></Notification>\r\n            <Form onSubmit={submit}>\r\n                <Form.Label>username:</Form.Label>\r\n                <Form.Control type=\"text\" id='username' value={username} name=\"username\" onChange={({ target }) => setUsername(target.value)} required />\r\n                <Form.Label>password:</Form.Label>\r\n                <Form.Control type=\"password\" id='password' value={password} name=\"password\" onChange={({ target }) => setPassword(target.value)} required />\r\n                <Button id='submit' type=\"submit\">login</Button> or <Link to='/signin'>signin</Link>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginForm","import React from 'react'\r\nimport { Navbar, Nav, Button } from 'react-bootstrap'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport Notification from './Notification'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { setUser } from '../reducers/userReducer'\r\nimport { setToken } from '../reducers/tokenReducer'\r\nimport { setNotification } from '../reducers/notificationReducer'\r\n\r\nconst Navigationbar = () => {\r\n    const user = useSelector(state => state.user)\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const handleLogout = () => {\r\n        window.localStorage.removeItem('user-token')\r\n        window.localStorage.removeItem('logged-user')\r\n        dispatch(setUser(null))\r\n        dispatch(setToken(''))\r\n        dispatch(setNotification({ message: 'logged out', error: false }, 5))\r\n        history.push('/login')\r\n    }\r\n    return (\r\n        <>\r\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n                <Navbar.Brand href=\"\" as=\"span\">ChatForum</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Nav.Link href=\"#\" as=\"span\">\r\n                            <Button variant=\"outline-info\" onClick={() => {history.push('/chats')}}>Chats</Button>\r\n                        </Nav.Link>\r\n                        <Nav.Link href=\"#\" as=\"span\">\r\n                            <div><Link to='/'>{user.username}</Link> logged in <Button variant=\"outline-info\" onClick={handleLogout}>logout</Button></div>\r\n                        </Nav.Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n            <Notification></Notification>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Navigationbar","import { gql } from '@apollo/client'\r\n\r\nexport const CREATE_CHAT = gql`\r\n    mutation createChat($chatTitle: String!) {\r\n        createChat(chatTitle: $chatTitle)  {\r\n            title\r\n        }\r\n    }\r\n`\r\n\r\nexport const CHATS = gql`\r\n    query {\r\n        chats {\r\n            title\r\n            latestComment{\r\n                content\r\n                date\r\n                user{\r\n                    username\r\n                }\r\n            }\r\n            date\r\n        }\r\n    }\r\n`\r\n\r\nexport const CHAT_ADDED = gql`\r\n    subscription {\r\n        chatAdded {\r\n            title\r\n            latestComment {\r\n                content\r\n                date\r\n                user {\r\n                    username\r\n                }\r\n            }\r\n            date\r\n        }\r\n    }\r\n`","import { gql } from '@apollo/client'\r\n\r\nexport const CREATE_COMMENT = gql`\r\n    mutation createComment($chatTitle: String!, $content: String!) {\r\n        createComment(chatTitle: $chatTitle, content: $content)  {\r\n            content\r\n            date\r\n            user{\r\n                username\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const COMMENTS = gql`\r\n    query comments($chatTitle: String){\r\n        comments(chatTitle: $chatTitle) {\r\n            content\r\n            date\r\n            user{\r\n                username\r\n            }\r\n            id\r\n        }\r\n    }\r\n`\r\n\r\nexport const COMMENT_ADDED = gql`\r\n    subscription {\r\n        commentAdded {\r\n            comment {\r\n                user { \r\n                    username\r\n                }\r\n                date\r\n                content\r\n                id\r\n            }\r\n            chatTitle\r\n        }\r\n    }\r\n`","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Chat = ({ chat }) => {\r\n    let latestComment = 'No comments yet.'\r\n    const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' }\r\n    let date = new Date(chat.date).toLocaleTimeString([], options)\r\n    if (chat.latestComment) {\r\n        if(chat.latestComment.content.length > 30) {\r\n            latestComment = `${chat.latestComment.content.substring(0, 30)}... -${chat.latestComment.user.username}`\r\n        } else {\r\n            latestComment = `${chat.latestComment.content} -${chat.latestComment.user.username}`\r\n        }\r\n        date = new Date(chat.latestComment.date).toLocaleTimeString([], options)\r\n    }\r\n    const styleBox = {\r\n        borderStyle: 'solid',\r\n        borderRadius: '5px',\r\n        padding: '10px',\r\n        marginBottom: '10px'\r\n    }\r\n    return (\r\n        <div style={styleBox}>\r\n            <div>\r\n                <Link to={`/chats/${chat.title}`}>{chat.title}</Link>\r\n            </div>\r\n            <div>\r\n                {latestComment}\r\n            </div>\r\n            <div>\r\n                {date}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat","import React, { useState, useEffect } from 'react'\r\nimport { Form, Button, Row, Col } from 'react-bootstrap'\r\nimport { useMutation } from '@apollo/client'\r\nimport { CREATE_CHAT } from '../queries/chatqueries'\r\nimport { setNotification } from '../reducers/notificationReducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst ChatForm = () => {\r\n    const [title, setTitle] = useState('')\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const [create, result] = useMutation(CREATE_CHAT, { // eslint-disable-line\r\n        onError: (error) => {\r\n            dispatch(setNotification({ message: error.graphQLErrors[0].message, error: true }, 10))\r\n        }\r\n    })\r\n    const submit = (event) => {\r\n        event.preventDefault()\r\n        create({ variables: { chatTitle: title } })\r\n        setTitle('')\r\n    }\r\n    useEffect(() => {\r\n        if(result.data) {\r\n            history.push(`/chats/${result.data.createChat.title}`)\r\n        }\r\n    }, [result.data]) // eslint-disable-line\r\n    return (\r\n        <>\r\n            <Form onSubmit={submit}>\r\n                <Row size=\"lg\">\r\n                    <Col md=\"10\">\r\n                        <Form.Control as=\"textarea\" rows=\"1\" style={{ resize: 'none' }} id='content' value={title} name=\"content\" onChange={({ target }) => setTitle(target.value)} placeholder='Title...' required block='true' />\r\n                    </Col>\r\n                    <Col md=\"2\">\r\n                        <Button id='submit' type=\"submit\" size=\"lg\" block>Start new chat</Button>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ChatForm","import React, { useState, useEffect } from 'react'\r\nimport { useLazyQuery, useSubscription } from '@apollo/client'\r\nimport { CHAT_ADDED, CHATS } from '../queries/chatqueries'\r\nimport { COMMENT_ADDED } from '../queries/commentqueries'\r\nimport Chat from './Chat'\r\nimport ChatForm from './ChatForm'\r\n\r\nconst ChatsPage = () => {\r\n    const [chats, setChats] = useState([])\r\n    const [loadChats, chatsResult] = useLazyQuery(CHATS)\r\n    useEffect(() => {\r\n        loadChats()\r\n    }, []) //eslint-disable-line\r\n    useEffect(() => {\r\n        if (chatsResult.data) {\r\n            setChats(chatsResult.data.chats.sort((chatA, chatB) => {\r\n                let dateA = chatA.date\r\n                if (chatA.latestComment) {\r\n                    dateA = chatA.latestComment.date\r\n                }\r\n                let dateB = chatB.date\r\n                if (chatB.latestComment) {\r\n                    dateB = chatB.latestComment.date\r\n                }\r\n                return dateB - dateA\r\n            }))\r\n        }\r\n    }, [chatsResult.data])\r\n    useSubscription(CHAT_ADDED, {\r\n        onSubscriptionData: ({ subscriptionData }) => {\r\n            const newChat = subscriptionData.data.chatAdded\r\n            const newChats = chats.concat(newChat)\r\n            newChats.sort((chatA, chatB) => {\r\n                let dateA = chatA.date\r\n                if (chatA.latestComment) {\r\n                    dateA = chatA.latestComment.date\r\n                }\r\n                let dateB = chatB.date\r\n                if (chatB.latestComment) {\r\n                    dateB = chatB.latestComment.date\r\n                }\r\n                return dateB - dateA\r\n            })\r\n            setChats(newChats)\r\n        }\r\n    })\r\n    useSubscription(COMMENT_ADDED, {\r\n        onSubscriptionData: ({ subscriptionData }) => {\r\n            const newComment = subscriptionData.data.commentAdded.comment\r\n            const chatTitle = subscriptionData.data.commentAdded.chatTitle\r\n            const newChats = chats.map(chat => chat.title === chatTitle ? { ...chat, latestComment: newComment } : chat)\r\n            newChats.sort((chatA, chatB) => {\r\n                let dateA = chatA.date\r\n                if (chatA.latestComment) {\r\n                    dateA = chatA.latestComment.date\r\n                }\r\n                let dateB = chatB.date\r\n                if (chatB.latestComment) {\r\n                    dateB = chatB.latestComment.date\r\n                }\r\n                return dateB - dateA\r\n            })\r\n            setChats(newChats)\r\n        }\r\n    })\r\n    const styleBox = {\r\n        borderStyle: 'solid',\r\n        borderRadius: '5px',\r\n        borderColor: 'grey',\r\n        padding: '10px',\r\n        marginBottom: '10px',\r\n        overflowY: 'scroll',\r\n        height: '75vh'\r\n    }\r\n    return (\r\n        <>\r\n            <h2>Chats</h2>\r\n            <div style={styleBox}>\r\n                {chats.map(chat =>\r\n                    <Chat key={chat.title} chat={chat}></Chat>\r\n                )}\r\n            </div>\r\n            <ChatForm></ChatForm>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ChatsPage","import React from 'react'\r\n\r\nconst Comment = ({ comment }) => {\r\n    const styleBox = {\r\n        borderStyle: 'solid',\r\n        borderRadius: '5px',\r\n        padding: '10px',\r\n        marginBottom: '10px'\r\n    }\r\n    const contentBoxStyle = {\r\n        width: '100%',\r\n        resize: 'none',\r\n        border: 'none'\r\n    }\r\n    const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' }\r\n    const date = new Date(comment.date).toLocaleTimeString([], options)\r\n    return (\r\n        <div style={styleBox}>\r\n            <div>\r\n                {comment.user.username} {date}\r\n            </div>\r\n            <textarea rows='2' value={comment.content} readOnly style={contentBoxStyle} block='true' />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Comment","import React, { useState } from 'react'\r\nimport { Form, Button, Row, Col } from 'react-bootstrap'\r\nimport { useMutation } from '@apollo/client'\r\nimport { CREATE_COMMENT } from '../queries/commentqueries'\r\nimport { setNotification } from '../reducers/notificationReducer'\r\nimport { useDispatch } from 'react-redux'\r\n\r\nconst CommentForm = ({ title }) => {\r\n    const [content, setContent] = useState('')\r\n    const dispatch = useDispatch()\r\n    const [send, result] = useMutation(CREATE_COMMENT, { // eslint-disable-line\r\n        onError: (error) => {\r\n            dispatch(setNotification({ message: error.graphQLErrors[0].message, error: true }, 10))\r\n        }\r\n    })\r\n    const submit = (event) => {\r\n        event.preventDefault()\r\n        send({ variables: { chatTitle: title, content } })\r\n        setContent('')\r\n    }\r\n    return (\r\n        <>\r\n            <Form onSubmit={submit}>\r\n                <Row size='lg'>\r\n                    <Col md='10'>\r\n                        <Form.Control as='textarea' rows='2' style={{ resize: 'none' }} id='content' value={content} name='content' onChange={({ target }) => setContent(target.value)} placeholder='New comment...' required block='true' />\r\n                    </Col>\r\n                    <Col md='2'>\r\n                        <Button id='submit' type='submit' size='lg' block>Send</Button>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CommentForm","import React, { useState, useEffect, useRef } from 'react'\r\nimport { useRouteMatch } from 'react-router-dom'\r\nimport { useLazyQuery, useSubscription } from '@apollo/client'\r\nimport { COMMENT_ADDED, COMMENTS } from '../queries/commentqueries'\r\nimport Comment from './Comment'\r\nimport CommentForm from './CommentForm'\r\n\r\nconst ChatPage = () => {\r\n    const [comments, setComments] = useState([])\r\n    const [loadComments, commentsResult] = useLazyQuery(COMMENTS)\r\n    const match = useRouteMatch('/chats/:title')\r\n    const title = match ? match.params.title : null\r\n    const commentsEndRef = useRef(null)\r\n    const scrollToBottom = () => {\r\n        commentsEndRef.current.scrollIntoView({ behavior: 'smooth' })\r\n    }\r\n    useEffect(() => {\r\n        loadComments({ variables: { chatTitle: title } })\r\n    }, []) //eslint-disable-line\r\n    useEffect(() => {\r\n        if (commentsResult.data) {\r\n            setComments(commentsResult.data.comments.sort((commentA, commentB) => {\r\n                return commentA.date - commentB.date\r\n            }))\r\n        }\r\n    }, [commentsResult.data])\r\n    useEffect(() => {\r\n        scrollToBottom()\r\n    }, [comments])\r\n    useSubscription(COMMENT_ADDED, {\r\n        onSubscriptionData: ({ subscriptionData }) => {\r\n            const newComment = subscriptionData.data.commentAdded.comment\r\n            const chatTitle = subscriptionData.data.commentAdded.chatTitle\r\n            if (chatTitle === title) {\r\n                const newComments = comments.concat(newComment)\r\n                newComments.sort((commentA, commentB) => {\r\n                    return commentA.date - commentB.date\r\n                })\r\n                setComments(newComments)\r\n            }\r\n        }\r\n    })\r\n    const styleBox = {\r\n        borderStyle: 'solid',\r\n        borderRadius: '5px',\r\n        borderColor: 'grey',\r\n        padding: '10px',\r\n        marginBottom: '10px',\r\n        overflowY: 'scroll',\r\n        height: '70vh'\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h2>{title}</h2>\r\n            <div style={styleBox}>\r\n                {comments.length === 0 ?\r\n                    <div>No comments yet</div>\r\n                    :\r\n                    comments.map(comment =>\r\n                        <Comment key={comment.id} comment={comment}></Comment>\r\n                    )\r\n                }\r\n                <div ref={commentsEndRef} />\r\n            </div>\r\n            <CommentForm title={title}></CommentForm>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ChatPage","import React from 'react'\r\nimport Navigationbar from './Navigationbar'\r\nimport ChatsPage from './ChatsPage'\r\nimport ChatPage from './ChatPage'\r\nimport { Switch, Route } from 'react-router-dom'\r\n\r\nconst LoggedInPage = () => {\r\n\r\n    return (\r\n        <>\r\n            <Navigationbar></Navigationbar>\r\n            <div className='container'>\r\n                <Switch>\r\n                    <Route path='/chats/:title'>\r\n                        <ChatPage></ChatPage>\r\n                    </Route>\r\n                    <Route path='/chats'>\r\n                        <ChatsPage></ChatsPage>\r\n                    </Route>\r\n                    <Route path='/'>\r\n                        <h1>Welcome</h1>\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LoggedInPage","import React, { useState, useEffect } from 'react'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { useMutation } from '@apollo/client'\r\nimport { SIGNIN } from '../queries/userqueries'\r\nimport Notification from './Notification'\r\nimport { setNotification } from '../reducers/notificationReducer'\r\nimport { setToken } from '../reducers/tokenReducer'\r\nimport { setUser } from '../reducers/userReducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useHistory, Link } from 'react-router-dom'\r\n\r\nconst SigninForm = () => {\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const [signin, result] = useMutation(SIGNIN, {\r\n        onError: (error) => {\r\n            dispatch(setNotification({ message: error.graphQLErrors[0].message, error: true }, 10))\r\n        }\r\n    })\r\n    useEffect(() => {\r\n        if (result.data) {\r\n            const token = result.data.createUser.value\r\n            const user = result.data.createUser.user\r\n            dispatch(setToken(token))\r\n            localStorage.setItem('user-token', token)\r\n            history.push('/')\r\n            localStorage.setItem('logged-user', JSON.stringify(user))\r\n            dispatch(setUser(user))\r\n            dispatch(setNotification({ message: 'Signed in', error: false }, 10))\r\n        }\r\n    }, [result.data]) // eslint-disable-line\r\n    const submit = (event) => {\r\n        event.preventDefault()\r\n        signin({ variables: { username, password } })\r\n        setUsername('')\r\n        setPassword('')\r\n    }\r\n    return (\r\n        <div className='container'>\r\n            <h2>Signin</h2>\r\n            <Notification></Notification>\r\n            <Form onSubmit={submit}>\r\n                <Form.Label>username:</Form.Label>\r\n                <Form.Control type=\"text\" id='username' value={username} name=\"username\" onChange={({ target }) => setUsername(target.value)} required />\r\n                <Form.Label>password:</Form.Label>\r\n                <Form.Control type=\"password\" id='password' value={password} name=\"password\" onChange={({ target }) => setPassword(target.value)} required />\r\n                <Button id='submit' type=\"submit\">signin</Button> or <Link to='/login'>login</Link>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SigninForm","import React from 'react'\r\nimport { Switch, Route, Redirect } from 'react-router-dom'\r\nimport LoginForm from './components/LoginForm'\r\nimport LoggedInPage from './components/LoggedInPage'\r\nimport SigninForm from './components/SigninForm'\r\nimport { useSelector } from 'react-redux'\r\n\r\nconst App = () => {\r\n    const token = useSelector(state => state.token)\r\n    return (\r\n        <div>\r\n            <Switch>\r\n                <Route path='/signin'>\r\n                    {token ?\r\n                        <Redirect to='/login'></Redirect>\r\n                        :\r\n                        <SigninForm></SigninForm>\r\n                    }\r\n                </Route>\r\n                <Route path='/login'>\r\n                    {token ?\r\n                        <Redirect to='/login'></Redirect>\r\n                        :\r\n                        <LoginForm></LoginForm>\r\n                    }\r\n                </Route>\r\n                <Route path='/'>\r\n                    {token ?\r\n                        <>\r\n                            <LoggedInPage></LoggedInPage>\r\n                        </>\r\n                        :\r\n                        <Redirect to='/login'></Redirect>\r\n                    }\r\n                </Route>\r\n            </Switch>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App","import { createStore, combineReducers, applyMiddleware } from 'redux'\r\nimport notificationReducer from './reducers/notificationReducer'\r\nimport userReducer from './reducers/userReducer'\r\nimport tokenReducer from './reducers/tokenReducer'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport thunk from 'redux-thunk'\r\n\r\nconst reducer = combineReducers({\r\n    notification: notificationReducer,\r\n    user: userReducer,\r\n    token: tokenReducer\r\n})\r\n\r\nconst store = createStore(\r\n    reducer,\r\n    composeWithDevTools(applyMiddleware(thunk))\r\n)\r\n\r\nexport default store","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport { ApolloClient, ApolloProvider, HttpLink, InMemoryCache, split } from '@apollo/client'\r\nimport { setContext } from 'apollo-link-context'\r\nimport { getMainDefinition } from '@apollo/client/utilities'\r\nimport { WebSocketLink } from '@apollo/link-ws'\r\nimport { BrowserRouter as Router } from 'react-router-dom'\r\nimport { Provider } from 'react-redux'\r\nimport store from './store'\r\nimport { setUser } from './reducers/userReducer'\r\nimport { setToken } from './reducers/tokenReducer'\r\nconst authLink = setContext((_, { headers }) => {\r\n    const token = localStorage.getItem('user-token')\r\n    return {\r\n        headers: {\r\n            ...headers,\r\n            authorization: token ? `bearer ${token}` : null\r\n        }\r\n    }\r\n})\r\n\r\n\r\nconst defaultOptions = {\r\n    watchQuery: {\r\n        fetchPolicy: 'no-cache'\r\n    },\r\n    query: {\r\n        fetchPolicy: 'no-cache'\r\n    }\r\n}\r\n\r\nconst httpLink = new HttpLink({ uri: '/graphql' })\r\n\r\nconst wsLink = new WebSocketLink({\r\n    uri: `wss://${window.location.host}/graphql`,\r\n    options: { reconnect: true }\r\n})\r\nconst splitLink = split(({ query }) => {\r\n    const definition = getMainDefinition(query)\r\n    return (definition.kind === 'OperationDefinition' && definition.operation === 'subscription')\r\n}, wsLink, authLink.concat(httpLink))\r\n\r\nconst client = new ApolloClient({\r\n    cache: new InMemoryCache(),\r\n    link: splitLink,\r\n    defaultOptions: defaultOptions\r\n})\r\n\r\n\r\n\r\n\r\nconst loggedToken = localStorage.getItem('user-token')\r\nconst loggedUser = localStorage.getItem('logged-user')\r\nif (loggedToken) {\r\n    store.dispatch(setToken(loggedToken))\r\n}\r\nif (loggedUser) {\r\n    store.dispatch(setUser(JSON.parse(loggedUser)))\r\n}\r\nReactDOM.render(<ApolloProvider client={client}><Provider store={store}><Router><App /></Router></Provider></ApolloProvider>, document.getElementById('root'))"],"sourceRoot":""}