{"version":3,"sources":["queries/userqueries.js","reducers/notificationReducer.js","components/Notification.js","reducers/tokenReducer.js","reducers/userReducer.js","components/LoginForm.js","components/Navigationbar.js","queries/chatqueries.js","queries/commentqueries.js","index.js","components/ChatListing.js","components/ChatForm.js","components/ChatsPage.js","components/Comment.js","components/CommentForm.js","components/Chat.js","components/ChatPage.js","components/ProfilePage.js","components/ErrorPage.js","components/LoggedInPage.js","components/SigninForm.js","App.js","store.js"],"names":["timeout","LOGIN","gql","SIGNIN","USER","SET_PROFILEPIC","DELETE_PROFILEPIC","setNotification","notification","time","dispatch","a","clearTimeout","setTimeout","type","reducer","state","action","Notification","useSelector","style","position","width","textAlign","zIndex","useDispatch","clearAlert","error","Alert","variant","className","onClick","message","setToken","token","data","setUser","user","LoginForm","useState","username","setUsername","password","setPassword","history","useHistory","useMutation","onError","graphQLErrors","login","result","useEffect","value","localStorage","setItem","push","JSON","stringify","Form","onSubmit","event","preventDefault","variables","Label","Control","id","name","onChange","target","required","Button","to","Navigationbar","Navbar","collapseOnSelect","expand","bg","Brand","href","as","Toggle","aria-controls","Collapse","Nav","Link","window","removeItem","CREATE_CHAT","DELETE_CHAT","CHATS","PINNED_CHATS","CHAT_ADDED","CHAT_DELETED","PIN_CHAT","UNPIN_CHAT","wsLink","CREATE_COMMENT","COMMENTS","COMMENT_ADDED","DELETE_COMMENT","COMMENT_DELETED","EDIT_COMMENT","COMMENT_EDITED","Chat","chat","isPinned","submitPin","submitUnpin","currentUser","latestComment","options","weekday","year","month","day","hour","minute","date","Date","toLocaleTimeString","content","length","substring","deleteChat","borderStyle","borderRadius","padding","marginBottom","title","size","admin","confirm","chatId","ChatForm","setTitle","create","createChat","chatTitle","Row","Col","md","paddingRight","rows","resize","placeholder","block","paddingLeft","height","ChatsPage","chats","setChats","useLazyQuery","loadChats","chatsResult","loadPinnedChats","pinnedChatsResult","chatsToShow","setChatsToShow","filter","setFilter","pinnedChats","setPinnedChats","sortChats","useCallback","chatA","chatB","includes","dateA","dateB","slice","sort","map","useSubscription","onSubscriptionData","newChat","subscriptionData","chatAdded","newChats","concat","newComment","commentAdded","comment","toLowerCase","startsWith","pinChat","pinResult","unpinChat","unpinResult","pchat","deletedChat","chatDeleted","display","float","paddingBottom","bottom","borderColor","overflowY","key","Comment","setContent","editing","setEditing","deleteComment","deleteResult","editComment","editResult","image","imageUrl","Image","src","fluid","profileImage","readOnly","border","commentId","endsWith","CommentForm","setImageUrl","onCompleted","send","comments","setComments","commentsToShow","setCommentsToShow","loadComments","commentsResult","commentsEndRef","useRef","commentA","commentB","called","loading","current","scrollIntoView","behavior","newComments","deletedComment","commentDeleted","editedComment","commentEdited","ref","ChatPage","match","useRouteMatch","params","ProfilePage","editImageUrl","setEditImageUrl","loadUser","userResult","setImage","setProfilePic","profilePicResult","setUserProfilePic","deleteProfilePic","deleteProfilePicResult","ErrorPage","errormessage","LoggedInPage","path","SigninForm","signin","createUser","App","left","top","combineReducers","notificationReducer","userReducer","tokenReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","authLink","setContext","_","headers","getItem","authorization","httpLink","HttpLink","uri","location","host","WebSocketLink","reconnect","splitLink","split","query","definition","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","link","defaultOptions","watchQuery","fetchPolicy","mutation","loggedToken","loggedUser","parse","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.a91de80f.chunk.js","sourcesContent":["import { gql } from '@apollo/client'\r\n\r\nexport const LOGIN = gql`\r\n    mutation login($username: String!, $password: String!) {\r\n        login(username: $username, password: $password)  {\r\n            value\r\n            user {\r\n                username\r\n                pinnedChats {\r\n                    title\r\n                }\r\n                admin\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const SIGNIN = gql`\r\n    mutation createUser($username: String!, $password: String!) {\r\n        createUser(username: $username, password: $password)  {\r\n            value\r\n            user {\r\n                username\r\n                pinnedChats {\r\n                    title\r\n                }\r\n                admin\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const USER = gql`\r\n    query user($username: String!) {\r\n        user(username: $username)  {\r\n            username\r\n            imageUrl\r\n        }\r\n    }\r\n`\r\n\r\nexport const SET_PROFILEPIC = gql`\r\nmutation setUserProfilePic($imageUrl: String!) {\r\n    setUserProfilePic(imageUrl: $imageUrl)  {\r\n        username\r\n        imageUrl\r\n    }\r\n}\r\n`\r\n\r\nexport const DELETE_PROFILEPIC = gql`\r\nmutation deleteUserProfilePic {\r\n    deleteUserProfilePic {\r\n        username\r\n        imageUrl\r\n    }\r\n}\r\n`","const reducer = (state = '', action) => {\r\n    switch (action.type) {\r\n        case 'SET NOTIFICATION': {\r\n            return action.notification\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nlet timeout\r\n\r\nexport const setNotification = (notification, time) => {\r\n    return async dispatch => {\r\n        if (notification !== '') {\r\n            clearTimeout(timeout)\r\n            timeout = setTimeout(() => {\r\n                dispatch(setNotification(''))\r\n            }, time * 1000)\r\n        }\r\n        dispatch({\r\n            type: 'SET NOTIFICATION',\r\n            notification: notification\r\n        })\r\n    }\r\n}\r\n\r\nexport default reducer","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Alert } from 'react-bootstrap'\r\nimport { setNotification } from '../reducers/notificationReducer'\r\n\r\nconst Notification = () => {\r\n    const notification = useSelector(state => state.notification)\r\n    const style = { position: 'absolute', width: '100%', textAlign: 'center', zIndex:9999 }\r\n    const dispatch = useDispatch()\r\n    const clearAlert = () => {\r\n        dispatch(setNotification(''))\r\n    }\r\n    if (notification === '') {\r\n        return (\r\n            <></>\r\n        )\r\n    }\r\n    if (notification.error) {\r\n        return (\r\n            <Alert style={style} variant=\"danger\" className='errormessage' onClick={clearAlert}>{notification.message}</Alert>\r\n        )\r\n    }\r\n    return (\r\n        <Alert style={style} variant=\"success\" className='message' onClick={clearAlert}>{notification.message}</Alert>\r\n    )\r\n}\r\n\r\nexport default Notification","const reducer = (state = null, action) => {\r\n    switch (action.type) {\r\n        case 'SET_TOKEN': {\r\n            return action.data\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const setToken = (token) => {\r\n    return async dispatch => {\r\n        dispatch({\r\n            type: 'SET_TOKEN',\r\n            data: token\r\n        })\r\n    }\r\n}\r\n\r\nexport default reducer","const reducer = (state = null, action) => {\r\n    switch (action.type) {\r\n        case 'SET_USER': {\r\n            return action.data\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const setUser = (user) => {\r\n    return async dispatch => {\r\n\r\n        dispatch({\r\n            type: 'SET_USER',\r\n            data: user\r\n        })\r\n    }\r\n}\r\n\r\nexport default reducer","import React, { useState, useEffect } from 'react'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { useMutation } from '@apollo/client'\r\nimport { LOGIN } from '../queries/userqueries'\r\nimport Notification from './Notification'\r\nimport { setNotification } from '../reducers/notificationReducer'\r\nimport { setToken } from '../reducers/tokenReducer'\r\nimport { setUser } from '../reducers/userReducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useHistory, Link } from 'react-router-dom'\r\n\r\nconst LoginForm = () => {\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const [login, result] = useMutation(LOGIN, {\r\n        onError: (error) => {\r\n            dispatch(setNotification({ message: error.graphQLErrors[0].message, error: true }, 10))\r\n        }\r\n    })\r\n    useEffect(() => {\r\n        if (result.data) {\r\n            const token = result.data.login.value\r\n            const user = result.data.login.user\r\n            dispatch(setToken(token))\r\n            localStorage.setItem('user-token', token)\r\n            history.push('/')\r\n            localStorage.setItem('logged-user', JSON.stringify(user))\r\n            dispatch(setUser(user))\r\n            dispatch(setNotification({ message: 'Logged in', error: false }, 10))\r\n        }\r\n    }, [result.data]) // eslint-disable-line\r\n    const submit = (event) => {\r\n        event.preventDefault()\r\n        login({ variables: { username, password } })\r\n        setUsername('')\r\n        setPassword('')\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Notification></Notification>\r\n            <div className='container'>\r\n                <h2>Login</h2>\r\n                <Form onSubmit={submit}>\r\n                    <Form.Label>username:</Form.Label>\r\n                    <Form.Control type=\"text\" id='username' value={username} name=\"username\" onChange={({ target }) => setUsername(target.value)} required />\r\n                    <Form.Label>password:</Form.Label>\r\n                    <Form.Control type=\"password\" id='password' value={password} name=\"password\" onChange={({ target }) => setPassword(target.value)} required />\r\n                    <Button id='submit' type=\"submit\">login</Button> or <Link to='/signin'>sign in</Link>\r\n                </Form>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LoginForm","import React from 'react'\r\nimport { Navbar, Nav, Button } from 'react-bootstrap'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport Notification from './Notification'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { setUser } from '../reducers/userReducer'\r\nimport { setToken } from '../reducers/tokenReducer'\r\nimport { setNotification } from '../reducers/notificationReducer'\r\n\r\nconst Navigationbar = () => {\r\n    const user = useSelector(state => state.user)\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const handleLogout = () => {\r\n        window.localStorage.removeItem('user-token')\r\n        window.localStorage.removeItem('logged-user')\r\n        dispatch(setUser(null))\r\n        dispatch(setToken(''))\r\n        dispatch(setNotification({ message: 'Logged out', error: false }, 5))\r\n        history.push('/login')\r\n    }\r\n    return (\r\n        <>\r\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n                <Navbar.Brand href=\"\" as=\"span\">ChatForum</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Nav.Link href=\"#\" as=\"span\">\r\n                            <Button variant=\"outline-info\" onClick={() => {history.push('/chats')}}>Chats</Button>\r\n                        </Nav.Link>\r\n                        <Nav.Link href=\"#\" as=\"span\">\r\n                            <div><Link to={`/users/${user.username}`}>{user.username}</Link> logged in <Button variant=\"outline-info\" onClick={handleLogout}>logout</Button></div>\r\n                        </Nav.Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n            <Notification></Notification>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Navigationbar","import { gql } from '@apollo/client'\r\n\r\nexport const CREATE_CHAT = gql`\r\n    mutation createChat($chatTitle: String!) {\r\n        createChat(chatTitle: $chatTitle)  {\r\n            title\r\n        }\r\n    }\r\n`\r\n\r\nexport const DELETE_CHAT = gql`\r\n    mutation deleteChat($chatId: String!) {\r\n        deleteChat(chatId: $chatId)  {\r\n            title\r\n        }\r\n    }\r\n`\r\n\r\nexport const CHATS = gql`\r\n    query {\r\n        chats {\r\n            title\r\n            latestComment{\r\n                content\r\n                date\r\n                user{\r\n                    username\r\n                }\r\n            }\r\n            id\r\n            date\r\n        }\r\n    }\r\n`\r\n\r\nexport const PINNED_CHATS = gql`\r\n    query {\r\n        pinnedChats {\r\n            title\r\n        }\r\n    }\r\n`\r\n\r\nexport const CHAT_ADDED = gql`\r\n    subscription {\r\n        chatAdded {\r\n            title\r\n            latestComment {\r\n                content\r\n                date\r\n                user {\r\n                    username\r\n                }\r\n            }\r\n            date\r\n        }\r\n    }\r\n`\r\n\r\nexport const CHAT_DELETED= gql`\r\n    subscription {\r\n        chatDeleted {\r\n            title\r\n            id\r\n        }\r\n    }\r\n`\r\n\r\nexport const PIN_CHAT = gql`\r\n    mutation pinChat($chatTitle: String!) {\r\n        pinChat(chatTitle: $chatTitle)  {\r\n            title\r\n        }\r\n    }\r\n`\r\n\r\nexport const UNPIN_CHAT = gql`\r\n    mutation unpinChat($chatTitle: String!) {\r\n        unpinChat(chatTitle: $chatTitle)  {\r\n            title\r\n        }\r\n    }\r\n`","import { gql } from '@apollo/client'\r\n\r\nexport const CREATE_COMMENT = gql`\r\n    mutation createComment($chatTitle: String!, $content: String!, $imageUrl: String) {\r\n        createComment(chatTitle: $chatTitle, content: $content, imageUrl: $imageUrl)  {\r\n            content\r\n            date\r\n            imageUrl\r\n            user{\r\n                username\r\n                imageUrl\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const COMMENTS = gql`\r\n    query comments($chatTitle: String){\r\n        comments(chatTitle: $chatTitle) {\r\n            content\r\n            date\r\n            user{\r\n                username\r\n                imageUrl\r\n            }\r\n            imageUrl\r\n            id\r\n        }\r\n    }\r\n`\r\n\r\nexport const COMMENT_ADDED = gql`\r\n    subscription {\r\n        commentAdded {\r\n            comment {\r\n                user { \r\n                    username\r\n                    imageUrl\r\n                }\r\n                date\r\n                content\r\n                imageUrl\r\n                id\r\n            }\r\n            chatTitle\r\n        }\r\n    }\r\n`\r\n\r\nexport const DELETE_COMMENT = gql`\r\n    mutation deleteComment($commentId: String!) {\r\n        deleteComment(commentId: $commentId)  {\r\n            content\r\n            id\r\n        }\r\n    }\r\n`\r\n\r\nexport const COMMENT_DELETED = gql`\r\n    subscription {\r\n        commentDeleted {\r\n            content\r\n            imageUrl\r\n            id\r\n        }\r\n    }\r\n`\r\n\r\nexport const EDIT_COMMENT = gql`\r\n    mutation editComment($commentId: String!, $content: String!) {\r\n        editComment(\r\n            commentId: $commentId\r\n            content: $content\r\n        ){\r\n            content\r\n            id\r\n        }\r\n    }\r\n`\r\n\r\nexport const COMMENT_EDITED = gql`\r\n    subscription {\r\n        commentEdited {\r\n            content\r\n            id\r\n            imageUrl\r\n        }\r\n    }\r\n`","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport { ApolloClient, ApolloProvider, HttpLink, InMemoryCache, split } from '@apollo/client'\r\nimport { setContext } from 'apollo-link-context'\r\nimport { getMainDefinition } from '@apollo/client/utilities'\r\nimport { WebSocketLink } from '@apollo/link-ws'\r\nimport { BrowserRouter as Router } from 'react-router-dom'\r\nimport { Provider } from 'react-redux'\r\nimport store from './store'\r\nimport { setUser } from './reducers/userReducer'\r\nimport { setToken } from './reducers/tokenReducer'\r\nconst authLink = setContext((_, { headers }) => {\r\n    const token = localStorage.getItem('user-token')\r\n    return {\r\n        headers: {\r\n            ...headers,\r\n            authorization: token ? `bearer ${token}` : null\r\n        }\r\n    }\r\n})\r\n\r\n\r\nconst defaultOptions = {\r\n    watchQuery: {\r\n        fetchPolicy: 'no-cache'\r\n    },\r\n    query: {\r\n        fetchPolicy: 'no-cache'\r\n    },\r\n    mutation: {\r\n        fetchPolicy: 'no-cache'\r\n    }\r\n}\r\n\r\nconst httpLink = new HttpLink({ uri: '/graphql' })\r\n\r\nlet wsLink\r\nif (window.location.host.includes('localhost')) {\r\n    wsLink = new WebSocketLink({\r\n        uri: `ws://${window.location.host}/graphql`,\r\n        options: { reconnect: true }\r\n    })\r\n} else {\r\n    wsLink = new WebSocketLink({\r\n        uri: `wss://${window.location.host}/graphql`,\r\n        options: { reconnect: true }\r\n    })\r\n}\r\nconst splitLink = split(({ query }) => {\r\n    const definition = getMainDefinition(query)\r\n    return (definition.kind === 'OperationDefinition' && definition.operation === 'subscription')\r\n}, wsLink, authLink.concat(httpLink))\r\n\r\nconst client = new ApolloClient({\r\n    cache: new InMemoryCache(),\r\n    link: splitLink,\r\n    defaultOptions: defaultOptions\r\n})\r\n\r\n\r\n\r\n\r\nconst loggedToken = localStorage.getItem('user-token')\r\nconst loggedUser = localStorage.getItem('logged-user')\r\nif (loggedToken) {\r\n    store.dispatch(setToken(loggedToken))\r\n}\r\nif (loggedUser) {\r\n    store.dispatch(setUser(JSON.parse(loggedUser)))\r\n}\r\nReactDOM.render(<ApolloProvider client={client}><Provider store={store}><Router><App /></Router></Provider></ApolloProvider>, document.getElementById('root'))","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button } from 'react-bootstrap'\r\nimport { useMutation } from '@apollo/client'\r\nimport { DELETE_CHAT } from '../queries/chatqueries'\r\nimport { setNotification } from '../reducers/notificationReducer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nconst Chat = ({ chat, isPinned, submitPin, submitUnpin }) => {\r\n    const dispatch = useDispatch()\r\n    const currentUser = useSelector(state => state.user)\r\n    let latestComment = 'No comments yet.'\r\n    const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' }\r\n    let date = new Date(chat.date).toLocaleTimeString([], options)\r\n    if (chat.latestComment) {\r\n        if (chat.latestComment.content.length > 30) {\r\n            latestComment = `${chat.latestComment.content.substring(0, 30)}... -${chat.latestComment.user.username}`\r\n        } else {\r\n            latestComment = `${chat.latestComment.content} -${chat.latestComment.user.username}`\r\n        }\r\n        date = new Date(chat.latestComment.date).toLocaleTimeString([], options)\r\n    }\r\n    const [deleteChat, result] = useMutation(DELETE_CHAT, { // eslint-disable-line\r\n        onError: (error) => {\r\n            dispatch(setNotification({ message: error.graphQLErrors[0].message, error: true }, 10))\r\n        }\r\n    })\r\n    const submitDelete = () => {\r\n        if (window.confirm('Delete chat?')) {\r\n            deleteChat({ variables: { chatId: chat.id } })\r\n        }\r\n    }\r\n    const styleBox = {\r\n        borderStyle: 'solid',\r\n        borderRadius: '5px',\r\n        padding: '10px',\r\n        marginBottom: '10px'\r\n    }\r\n    return (\r\n        <div style={styleBox}>\r\n            <div>\r\n                <Link to={`/chats/${chat.title}`}>{chat.title}</Link>\r\n            </div>\r\n            <div>\r\n                {latestComment}\r\n            </div>\r\n            <div>\r\n                {date}\r\n                {isPinned ?\r\n                    <Button type='button' size='sm' onClick={() => submitUnpin(chat)}>Unpin</Button>\r\n                    :\r\n                    <Button type='button' size='sm' onClick={() => submitPin(chat)}>Pin</Button>\r\n                }\r\n                {currentUser.admin ?\r\n                    <Button type='button' size='sm' onClick={submitDelete}>Delete</Button>\r\n                    :\r\n                    <></>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat","import React, { useState, useEffect } from 'react'\r\nimport { Form, Button, Row, Col } from 'react-bootstrap'\r\nimport { useMutation } from '@apollo/client'\r\nimport { CREATE_CHAT } from '../queries/chatqueries'\r\nimport { setNotification } from '../reducers/notificationReducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst ChatForm = () => {\r\n    const [title, setTitle] = useState('')\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const [create, result] = useMutation(CREATE_CHAT, { // eslint-disable-line\r\n        onError: (error) => {\r\n            dispatch(setNotification({ message: error.graphQLErrors[0].message, error: true }, 10))\r\n        }\r\n    })\r\n    const submit = (event) => {\r\n        event.preventDefault()\r\n        create({ variables: { chatTitle: title } })\r\n        setTitle('')\r\n    }\r\n    useEffect(() => {\r\n        if (result.data) {\r\n            dispatch(setNotification({ message: 'New chat created', error: false }, 10))\r\n            history.push(`/chats/${result.data.createChat.title}`)\r\n        }\r\n    }, [result.data]) // eslint-disable-line\r\n    return (\r\n        <>\r\n            <Form onSubmit={submit}>\r\n                <Row size=\"lg\">\r\n                    <Col md=\"10\" style={{ paddingRight: '0' }}>\r\n                        <Form.Control as=\"textarea\" rows=\"1\" style={{ resize: 'none' }} id='content' value={title} name=\"content\" onChange={({ target }) => setTitle(target.value)} placeholder='Title...' required block='true' />\r\n                    </Col>\r\n                    <Col md=\"2\" style={{ paddingLeft: '0' }}>\r\n                        <Button style={{ height: '100%' }} id='submit' type=\"submit\" size=\"lg\" block='true'>Start new chat</Button>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ChatForm","import React, { useState, useEffect, useCallback } from 'react'\r\nimport { useLazyQuery, useSubscription, useMutation } from '@apollo/client'\r\nimport { CHAT_ADDED, CHATS, PINNED_CHATS, CHAT_DELETED } from '../queries/chatqueries'\r\nimport { COMMENT_ADDED } from '../queries/commentqueries'\r\nimport Chat from './ChatListing'\r\nimport ChatForm from './ChatForm'\r\nimport { useDispatch } from 'react-redux'\r\nimport { UNPIN_CHAT, PIN_CHAT } from '../queries/chatqueries'\r\nimport { setNotification } from '../reducers/notificationReducer'\r\n\r\nconst ChatsPage = () => {\r\n    const dispatch = useDispatch()\r\n    const [chats, setChats] = useState([])\r\n    const [loadChats, chatsResult] = useLazyQuery(CHATS)\r\n    const [loadPinnedChats, pinnedChatsResult] = useLazyQuery(PINNED_CHATS)\r\n    const [chatsToShow, setChatsToShow] = useState([])\r\n    const [filter, setFilter] = useState('')\r\n    const [pinnedChats, setPinnedChats] = useState()\r\n    const sortChats = useCallback((chatA, chatB) => {\r\n        if(!pinnedChats) {\r\n            return 0\r\n        }\r\n        if (pinnedChats.includes(chatA.title) && !pinnedChats.includes(chatB.title)) {\r\n            return -1\r\n        }\r\n        if (!pinnedChats.includes(chatA.title) && pinnedChats.includes(chatB.title)) {\r\n            return 1\r\n        }\r\n        let dateA = chatA.date\r\n        if (chatA.latestComment) {\r\n            dateA = chatA.latestComment.date\r\n        }\r\n        let dateB = chatB.date\r\n        if (chatB.latestComment) {\r\n            dateB = chatB.latestComment.date\r\n        }\r\n        return dateB - dateA\r\n    }, [pinnedChats])\r\n    useEffect(() => {\r\n        loadChats()\r\n        loadPinnedChats()\r\n    }, []) //eslint-disable-line\r\n    useEffect(() => {\r\n        if (chatsResult.data) {\r\n            setChats(chatsResult.data.chats.slice(0).sort(sortChats))\r\n            setChatsToShow(chats)\r\n        }\r\n    }, [chatsResult.data]) //eslint-disable-line\r\n    useEffect(() => {\r\n        if (pinnedChatsResult.data) {\r\n            setPinnedChats(pinnedChatsResult.data.pinnedChats.map(chat => chat.title))\r\n        }\r\n    }, [pinnedChatsResult.data]) //eslint-disable-line\r\n    useSubscription(CHAT_ADDED, {\r\n        onSubscriptionData: ({ subscriptionData }) => {\r\n            const newChat = subscriptionData.data.chatAdded\r\n            const newChats = chats.concat(newChat)\r\n            newChats.sort(sortChats)\r\n            setChats(newChats)\r\n        }\r\n    })\r\n    useSubscription(COMMENT_ADDED, {\r\n        onSubscriptionData: ({ subscriptionData }) => {\r\n            const newComment = subscriptionData.data.commentAdded.comment\r\n            const chatTitle = subscriptionData.data.commentAdded.chatTitle\r\n            const newChats = chats.map(chat => chat.title === chatTitle ? { ...chat, latestComment: newComment } : chat)\r\n            newChats.sort(sortChats)\r\n            setChats(newChats)\r\n        }\r\n    })\r\n    useEffect(() => {\r\n        if (filter === '') {\r\n            setChatsToShow(chats.slice(0).sort(sortChats))\r\n        } else {\r\n            setChatsToShow(chats.filter(chat => chat.title.toLowerCase().startsWith(filter.toLowerCase())).sort(sortChats))\r\n        }\r\n    }, [filter, chats, sortChats])\r\n    const [pinChat, pinResult] = useMutation(PIN_CHAT, { // eslint-disable-line\r\n        onError: (error) => {\r\n            dispatch(setNotification({ message: error.graphQLErrors[0].message, error: true }, 10))\r\n        }\r\n    })\r\n    const [unpinChat, unpinResult] = useMutation(UNPIN_CHAT, { // eslint-disable-line\r\n        onError: (error) => {\r\n            dispatch(setNotification({ message: error.graphQLErrors[0].message, error: true }, 10))\r\n        }\r\n    })\r\n    const submitPin = (chat) => {\r\n        if (window.confirm('Pin chat?')) {\r\n            pinChat({ variables: { chatTitle: chat.title } })\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (pinResult.data) {\r\n            setPinnedChats(pinnedChats.concat(pinResult.data.pinChat.title))\r\n            dispatch(setNotification({ message: 'Chat pinned', error: false }, 10))\r\n        }\r\n    }, [pinResult.data]) // eslint-disable-line\r\n    const submitUnpin = (chat) => {\r\n        if (window.confirm('Unpin chat?')) {\r\n            unpinChat({ variables: { chatTitle: chat.title } })\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (unpinResult.data) {\r\n            setPinnedChats(pinnedChats.filter(pchat => pchat !== unpinResult.data.unpinChat.title))\r\n            dispatch(setNotification({ message: 'Chat unpinned', error: false }, 10))\r\n        }\r\n    }, [unpinResult.data]) // eslint-disable-line\r\n    useSubscription(CHAT_DELETED, {\r\n        onSubscriptionData: ({ subscriptionData }) => {\r\n            const deletedChat = subscriptionData.data.chatDeleted\r\n            setChats(chats.filter(chat => chat.id !== deletedChat.id))\r\n        }\r\n    })\r\n    const styleBox = {\r\n        borderStyle: 'solid',\r\n        borderRadius: '5px',\r\n        borderColor: 'grey',\r\n        padding: '10px',\r\n        marginBottom: '0',\r\n        overflowY: 'scroll',\r\n        height: '77vh'\r\n    }\r\n    return (\r\n        <div>\r\n            <h2 style={{ display: 'inline-block', marginBottom: '0' }}>Chats</h2>\r\n            <input style={{ float: 'right', width: '30%', paddingBottom: '0', position: 'relative', bottom: '-1.7vh' }} type='text' value={filter} onChange={({ target }) => setFilter(target.value)} placeholder='Filter chats by title...'></input>\r\n            <div style={styleBox}>\r\n                {chatsToShow.map(chat =>\r\n                    <Chat key={chat.id} chat={chat} submitPin={submitPin} submitUnpin={submitUnpin} isPinned={pinnedChats.includes(chat.title)}></Chat>\r\n                )}\r\n            </div>\r\n            <ChatForm></ChatForm>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatsPage","import React, { useEffect, useState } from 'react'\r\nimport { useMutation } from '@apollo/client'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setNotification } from '../reducers/notificationReducer'\r\nimport { Button, Image } from 'react-bootstrap'\r\nimport { DELETE_COMMENT, EDIT_COMMENT } from '../queries/commentqueries'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Comment = ({ comment }) => {\r\n    const dispatch = useDispatch()\r\n    const currentUser = useSelector(state => state.user)\r\n    const [content, setContent] = useState(comment.content)\r\n    const [editing, setEditing] = useState(false)\r\n    const [deleteComment, deleteResult] = useMutation(DELETE_COMMENT, { // eslint-disable-line\r\n        onError: (error) => {\r\n            dispatch(setNotification({ message: error.graphQLErrors[0].message, error: true }, 10))\r\n        }\r\n    })\r\n    const [editComment, editResult] = useMutation(EDIT_COMMENT, { // eslint-disable-line\r\n        onError: (error) => {\r\n            dispatch(setNotification({ message: error.graphQLErrors[0].message, error: true }, 10))\r\n        }\r\n    })\r\n    const submitDelete = () => {\r\n        if (window.confirm('Delete comment?')) {\r\n            deleteComment({ variables: { commentId: comment.id } })\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (deleteResult.data) {\r\n            dispatch(setNotification({ message: 'Comment deleted', error: false }, 10))\r\n        }\r\n    }, [deleteResult.data]) // eslint-disable-line\r\n    let image = <></>\r\n    if (comment.imageUrl) {\r\n        image = <><Image src={comment.imageUrl} fluid></Image><br /></>\r\n    }\r\n    let profileImage = <></>\r\n    if (comment.user.imageUrl) {\r\n        profileImage = <><Image style={{ height: '10%', width: '10%' }} src={comment.user.imageUrl} fluid></Image></>\r\n    }\r\n    const submitEdit = () => {\r\n        if (window.confirm('Edit comment?')) {\r\n            editComment({ variables: { commentId: comment.id, content: content } })\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (editResult.data) {\r\n            setEditing(false)\r\n            dispatch(setNotification({ message: 'Comment edited', error: false }, 10))\r\n        }\r\n    }, [editResult.data]) // eslint-disable-line\r\n    const stopEditing = () => {\r\n        setEditing(false)\r\n        setContent(comment.content)\r\n    }\r\n    const startEditing = () => {\r\n        setEditing(true)\r\n        if (comment.content.endsWith(' -edited')) {\r\n            setContent(comment.content.substring(0, comment.content.length - 8))\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        setContent(comment.content)\r\n    }, [comment])\r\n    const styleBox = {\r\n        borderStyle: 'solid',\r\n        borderRadius: '5px',\r\n        padding: '10px',\r\n        marginBottom: '10px'\r\n    }\r\n    const contentBoxStyle = {\r\n        width: '100%',\r\n        resize: 'none',\r\n        border: 'none'\r\n    }\r\n    const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' }\r\n    const date = new Date(comment.date).toLocaleTimeString([], options)\r\n    return (\r\n        <div style={styleBox}>\r\n            <div>\r\n                {profileImage} <Link to={`/users/${comment.user.username}`}>{comment.user.username}</Link> {date}\r\n            </div>\r\n            <textarea rows='2' value={content} readOnly={!editing} style={contentBoxStyle} onChange={({ target }) => setContent(target.value)} block='true' />\r\n            {image}\r\n            {(currentUser.username === comment.user.username || currentUser.admin) && (comment.content !== 'Comment deleted') ?\r\n                <>\r\n                    <Button type='button' size='sm' onClick={submitDelete}>Delete comment</Button>\r\n                    {editing ?\r\n                        <>\r\n                            <Button type='button' size='sm' onClick={stopEditing}>Stop editing</Button>\r\n                            <Button type='button' size='sm' onClick={submitEdit}>Submit edit</Button>\r\n                        </>\r\n                        :\r\n                        <>\r\n                            {(currentUser.username === comment.user.username) ?\r\n                                <Button type='button' size='sm' onClick={startEditing}>Start editing</Button>\r\n                                :\r\n                                <></>\r\n                            }\r\n                        </>\r\n                    }\r\n                </>\r\n                :\r\n                <></>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Comment","import React, { useState } from 'react'\r\nimport { Form, Button, Row, Col } from 'react-bootstrap'\r\nimport { useMutation } from '@apollo/client'\r\nimport { CREATE_COMMENT } from '../queries/commentqueries'\r\nimport { setNotification } from '../reducers/notificationReducer'\r\nimport { useDispatch } from 'react-redux'\r\n\r\nconst CommentForm = ({ title }) => {\r\n    const [content, setContent] = useState('')\r\n    const [imageUrl, setImageUrl] = useState('')\r\n    const dispatch = useDispatch()\r\n    const [send, result] = useMutation(CREATE_COMMENT, { // eslint-disable-line\r\n        onCompleted: () => {\r\n            setContent('')\r\n            setImageUrl('')\r\n        },\r\n        onError: (error) => {\r\n            dispatch(setNotification({ message: error.graphQLErrors[0].message, error: true }, 10))\r\n        }\r\n    })\r\n    const submit = (event) => {\r\n        event.preventDefault()\r\n        send({ variables: { chatTitle: title, content, imageUrl } })\r\n    }\r\n    return (\r\n        <div>\r\n            <Form onSubmit={submit}>\r\n                <Row size='lg'>\r\n                    <Col md='10' style={{ paddingRight: '0' }}>\r\n                        <Form.Control as='textarea' rows='2' style={{ resize: 'none' }} id='content' value={content} name='content' onChange={({ target }) => setContent(target.value)} placeholder='New comment...' required block='true' />\r\n                        <Form.Control size=\"sm\" type=\"text\" placeholder=\"Image url...\" value={imageUrl} name='imageUrl' id='imageUrl' onChange={({ target }) => setImageUrl(target.value)} block='true'></Form.Control>\r\n                    </Col>\r\n                    <Col md='2' style={{ paddingLeft: '0' }}>\r\n                        <Button style={{ height: '100%' }} id='submit' type='submit' size='lg' block>Send</Button>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CommentForm","import React, { useState, useEffect, useRef } from 'react'\r\nimport { useLazyQuery, useSubscription } from '@apollo/client'\r\nimport { COMMENT_ADDED, COMMENTS, COMMENT_DELETED, COMMENT_EDITED } from '../queries/commentqueries'\r\nimport Comment from './Comment'\r\nimport CommentForm from './CommentForm'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst Chat = ({ title }) => {\r\n    const [comments, setComments] = useState([])\r\n    const history = useHistory()\r\n    const [commentsToShow, setCommentsToShow] = useState([])\r\n    const [filter, setFilter] = useState('')\r\n    const [loadComments, commentsResult] = useLazyQuery(COMMENTS)\r\n    const commentsEndRef = useRef(null)\r\n    const scrollToBottom = () => {\r\n        commentsEndRef.current.scrollIntoView({ behavior: 'smooth' })\r\n    }\r\n    useEffect(() => {\r\n        loadComments({ variables: { chatTitle: title } })\r\n    }, []) //eslint-disable-line\r\n    useEffect(() => {\r\n        loadComments({ variables: { chatTitle: title } })\r\n    }, [title]) //eslint-disable-line\r\n    useEffect(() => {\r\n        if (commentsResult.data) {\r\n            setComments(commentsResult.data.comments.sort((commentA, commentB) => {\r\n                return commentA.date - commentB.date\r\n            }))\r\n        } else if (commentsResult.called && !commentsResult.loading) {\r\n            history.push('/error/Chat does not exist')\r\n        }\r\n    }, [commentsResult]) //eslint-disable-line\r\n    useEffect(scrollToBottom, [comments, commentsToShow])\r\n    useSubscription(COMMENT_ADDED, {\r\n        onSubscriptionData: ({ subscriptionData }) => {\r\n            const newComment = subscriptionData.data.commentAdded.comment\r\n            const chatTitle = subscriptionData.data.commentAdded.chatTitle\r\n            if (chatTitle === title) {\r\n                const newComments = comments.concat(newComment)\r\n                newComments.sort((commentA, commentB) => {\r\n                    return commentA.date - commentB.date\r\n                })\r\n                setComments(newComments)\r\n            }\r\n        }\r\n    })\r\n    useSubscription(COMMENT_DELETED, {\r\n        onSubscriptionData: ({ subscriptionData }) => {\r\n            const deletedComment = subscriptionData.data.commentDeleted\r\n            setComments(comments.map(comment => comment.id === deletedComment.id ? { ...comment, content: deletedComment.content, imageUrl: deletedComment.imageUrl } : comment))\r\n        }\r\n    })\r\n    useSubscription(COMMENT_EDITED, {\r\n        onSubscriptionData: ({ subscriptionData }) => {\r\n            const editedComment = subscriptionData.data.commentEdited\r\n            setComments(comments.map(comment => comment.id === editedComment.id ? { ...comment, content: editedComment.content } : comment))\r\n        }\r\n    })\r\n    useEffect(() => {\r\n        if (filter === '') {\r\n            setCommentsToShow(comments)\r\n        } else {\r\n            setCommentsToShow(comments.filter(comment => comment.content.toLowerCase().includes(filter.toLowerCase())))\r\n        }\r\n    }, [filter, comments])\r\n    const styleBox = {\r\n        borderStyle: 'solid',\r\n        borderRadius: '5px',\r\n        borderColor: 'grey',\r\n        padding: '10px',\r\n        marginBottom: '0',\r\n        overflowY: 'scroll',\r\n        height: '70vh',\r\n        width: '100%'\r\n    }\r\n    return (\r\n        <>\r\n            <input style={{ float: 'right', width: '30%', paddingBottom: '0', position: 'relative', bottom: '-1.7vh' }} type='text' value={filter} onChange={({ target }) => setFilter(target.value)} placeholder='Filter comments by content...'></input>\r\n            <br />\r\n            <div style={styleBox}>\r\n                {comments.length === 0 ?\r\n                    <div>No comments yet</div>\r\n                    :\r\n                    commentsToShow.map(comment =>\r\n                        <Comment key={comment.id} comment={comment}></Comment>\r\n                    )\r\n                }\r\n                <div ref={commentsEndRef} />\r\n            </div>\r\n            <CommentForm title={title}></CommentForm>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Chat","import React from 'react'\r\nimport Chat from './Chat'\r\nimport { useRouteMatch } from 'react-router-dom'\r\n\r\nconst ChatPage = () => {\r\n    const match = useRouteMatch('/chats/:title')\r\n    const title = match ? match.params.title : null\r\n    return (\r\n        <div>\r\n            <h2 style={{ display: 'inline-block', marginBottom: '0' }}>{title}</h2>\r\n            <Chat title={title}></Chat>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatPage","import React, { useEffect, useState } from 'react'\r\nimport { useRouteMatch } from 'react-router-dom'\r\nimport { useLazyQuery } from '@apollo/client'\r\nimport { USER } from '../queries/userqueries'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { Button, Image } from 'react-bootstrap'\r\nimport { SET_PROFILEPIC, DELETE_PROFILEPIC } from '../queries/userqueries'\r\nimport { setNotification } from '../reducers/notificationReducer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useMutation } from '@apollo/client'\r\nimport Chat from './Chat'\r\n\r\nconst ProfilePage = () => {\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const currentUser = useSelector(state => state.user)\r\n    const match = useRouteMatch('/users/:username')\r\n    const [user, setUser] = useState(null)\r\n    const [imageUrl, setImageUrl] = useState('')\r\n    const [editImageUrl, setEditImageUrl] = useState(false)\r\n    const username = match ? match.params.username : null\r\n    const [loadUser, userResult] = useLazyQuery(USER)\r\n    const [image, setImage] = useState(<></>)\r\n    useEffect(() => {\r\n        loadUser({ variables: { username } })\r\n    }, [username]) //eslint-disable-line\r\n    useEffect(() => {\r\n        if (userResult.data) {\r\n            setUser(userResult.data.user)\r\n        } else if (userResult.called && !userResult.loading) {\r\n            history.push('/error/User does not exist')\r\n        }\r\n    }, [userResult]) //eslint-disable-line\r\n    const [setProfilePic, profilePicResult] = useMutation(SET_PROFILEPIC, { // eslint-disable-line\r\n        onError: (error) => {\r\n            dispatch(setNotification({ message: error.graphQLErrors[0].message, error: true }, 10))\r\n        }\r\n    })\r\n    const submitSetImage = () => {\r\n        if (window.confirm('Set profile picture?')) {\r\n            setProfilePic({ variables: { imageUrl } })\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (profilePicResult.data) {\r\n            dispatch(setNotification({ message: 'Profile picture set', error: false }, 10))\r\n            setUser({ ...user, imageUrl: profilePicResult.data.setUserProfilePic.imageUrl })\r\n            setImageUrl('')\r\n            setEditImageUrl(false)\r\n            setImage(<><Image style={{ height: '10%', width: '10%' }} src={profilePicResult.data.setUserProfilePic.imageUrl} fluid></Image><br /></>)\r\n        }\r\n    }, [profilePicResult.data]) // eslint-disable-line\r\n    const [deleteProfilePic, deleteProfilePicResult] = useMutation(DELETE_PROFILEPIC, { // eslint-disable-line\r\n        onError: (error) => {\r\n            dispatch(setNotification({ message: error.graphQLErrors[0].message, error: true }, 10))\r\n        }\r\n    })\r\n    const submitDeleteImage = () => {\r\n        if (window.confirm('Delete profile picture?')) {\r\n            deleteProfilePic()\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (deleteProfilePicResult.data) {\r\n            dispatch(setNotification({ message: 'Profile picture deleted', error: false }, 10))\r\n            setUser({ ...user, imageUrl: null })\r\n            setImageUrl('')\r\n            setEditImageUrl(false)\r\n            setImage(<></>)\r\n        }\r\n    }, [deleteProfilePicResult.data]) // eslint-disable-line\r\n    const stopEditing = () => {\r\n        setEditImageUrl(false)\r\n        setImageUrl('')\r\n    }\r\n    useEffect(() => {\r\n        if (user && user.imageUrl) {\r\n            setImage(<><Image style={{ height: '100%', width: '100%' }} src={user.imageUrl} fluid></Image><br /></>)\r\n        }\r\n    }, [user])\r\n    return (\r\n        <>\r\n            {user ?\r\n                <div className=\"row\">\r\n                    <div className=\"col-3\">\r\n                        <div className=\"row\" >\r\n                            <div>{image}</div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <h2>{user.username}</h2>\r\n                        </div>\r\n                        <div className=\"row\" >\r\n                            {user.username === currentUser.username ?\r\n                                <>\r\n                                    {editImageUrl ?\r\n                                        <>\r\n                                            <div className=\"row\">\r\n                                                <input type='text' placeholder='Url of the image...' value={imageUrl} onChange={({ target }) => setImageUrl(target.value)}></input>\r\n                                            </div>\r\n                                            <div className=\"row\">\r\n                                                <Button type='button' size='sm' onClick={stopEditing}>Back</Button>\r\n                                                {user.imageUrl ?\r\n                                                    <Button type='button' size='sm' onClick={submitDeleteImage}>Delete image</Button>\r\n                                                    :\r\n                                                    <></>\r\n                                                }\r\n                                                <Button type='button' size='sm' onClick={submitSetImage}>Submit image</Button>\r\n                                            </div>\r\n                                        </>\r\n                                        :\r\n                                        <Button type='button' size='sm' onClick={() => setEditImageUrl(true)}>Set image</Button>\r\n                                    }\r\n                                </>\r\n                                :\r\n                                <></>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-9\">\r\n                        <div>\r\n                            <h2 style={{ display: 'inline-block', marginBottom: '0' }}>{`${username}'s chat`}</h2>\r\n                            <Chat title={`userChat${username}`}></Chat>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                :\r\n                <></>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProfilePage","import React from 'react'\r\nimport { useRouteMatch } from 'react-router-dom'\r\n\r\nconst ErrorPage = () => {\r\n    const match = useRouteMatch('/error/:errormessage')\r\n    const errormessage = match ? match.params.errormessage : null\r\n\r\n    return (\r\n        <h2>{errormessage}</h2>\r\n    )\r\n}\r\n\r\nexport default ErrorPage","import React from 'react'\r\nimport Navigationbar from './Navigationbar'\r\nimport ChatsPage from './ChatsPage'\r\nimport ChatPage from './ChatPage'\r\nimport ProfilePage from './ProfilePage'\r\nimport { Switch, Route, Redirect } from 'react-router-dom'\r\nimport ErrorPage from './ErrorPage'\r\n\r\nconst LoggedInPage = () => {\r\n    return (\r\n        <>\r\n            <Navigationbar></Navigationbar>\r\n            <div className='container' style={{ height: '100%' }}>\r\n                <Switch>\r\n                    <Route path='/error/:errormessage'>\r\n                        <ErrorPage></ErrorPage>\r\n                    </Route>\r\n                    <Route path='/chats/:title'>\r\n                        <ChatPage></ChatPage>\r\n                    </Route>\r\n                    <Route path='/chats'>\r\n                        <ChatsPage></ChatsPage>\r\n                    </Route>\r\n                    <Route path='/users/:username'>\r\n                        <ProfilePage></ProfilePage>\r\n                    </Route>\r\n                    <Route path='/'>\r\n                        <Redirect to='/chats'></Redirect>\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LoggedInPage","import React, { useState, useEffect } from 'react'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { useMutation } from '@apollo/client'\r\nimport { SIGNIN } from '../queries/userqueries'\r\nimport Notification from './Notification'\r\nimport { setNotification } from '../reducers/notificationReducer'\r\nimport { setToken } from '../reducers/tokenReducer'\r\nimport { setUser } from '../reducers/userReducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useHistory, Link } from 'react-router-dom'\r\n\r\nconst SigninForm = () => {\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const [signin, result] = useMutation(SIGNIN, {\r\n        onError: (error) => {\r\n            dispatch(setNotification({ message: error.graphQLErrors[0].message, error: true }, 10))\r\n        }\r\n    })\r\n    useEffect(() => {\r\n        if (result.data) {\r\n            const token = result.data.createUser.value\r\n            const user = result.data.createUser.user\r\n            dispatch(setToken(token))\r\n            localStorage.setItem('user-token', token)\r\n            history.push('/')\r\n            localStorage.setItem('logged-user', JSON.stringify(user))\r\n            dispatch(setUser(user))\r\n            dispatch(setNotification({ message: 'Signed in', error: false }, 10))\r\n        }\r\n    }, [result.data]) // eslint-disable-line\r\n    const submit = (event) => {\r\n        event.preventDefault()\r\n        signin({ variables: { username, password } })\r\n        setUsername('')\r\n        setPassword('')\r\n    }\r\n    return (\r\n        <>\r\n            <Notification></Notification>\r\n            <div className='container'>\r\n                <h2>Sign in</h2>\r\n                <Form onSubmit={submit}>\r\n                    <Form.Label>username:</Form.Label>\r\n                    <Form.Control type=\"text\" id='username' value={username} name=\"username\" onChange={({ target }) => setUsername(target.value)} required />\r\n                    <Form.Label>password:</Form.Label>\r\n                    <Form.Control type=\"password\" id='password' value={password} name=\"password\" onChange={({ target }) => setPassword(target.value)} required />\r\n                    <Button id='submit' type=\"submit\">sign in</Button> or <Link to='/login'>login</Link>\r\n                </Form>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SigninForm","import React from 'react'\r\nimport { Switch, Route, Redirect } from 'react-router-dom'\r\nimport LoginForm from './components/LoginForm'\r\nimport LoggedInPage from './components/LoggedInPage'\r\nimport SigninForm from './components/SigninForm'\r\nimport { useSelector } from 'react-redux'\r\n\r\nconst App = () => {\r\n    const token = useSelector(state => state.token)\r\n    return (\r\n        <div style={{\r\n            width: '100%',\r\n            height: '100%',\r\n            left: 0,\r\n            top: 0,\r\n            zIndex: 10,\r\n        }}>\r\n            <Switch>\r\n                <Route path='/signin'>\r\n                    {token ?\r\n                        <Redirect to='/chats'></Redirect>\r\n                        :\r\n                        <SigninForm></SigninForm>\r\n                    }\r\n                </Route>\r\n                <Route path='/login'>\r\n                    {token ?\r\n                        <Redirect to='/chats'></Redirect>\r\n                        :\r\n                        <LoginForm></LoginForm>\r\n                    }\r\n                </Route>\r\n                <Route path='/'>\r\n                    {token ?\r\n                        <>\r\n                            <LoggedInPage></LoggedInPage>\r\n                        </>\r\n                        :\r\n                        <Redirect to='/login'></Redirect>\r\n                    }\r\n                </Route>\r\n            </Switch>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App","import { createStore, combineReducers, applyMiddleware } from 'redux'\r\nimport notificationReducer from './reducers/notificationReducer'\r\nimport userReducer from './reducers/userReducer'\r\nimport tokenReducer from './reducers/tokenReducer'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport thunk from 'redux-thunk'\r\n\r\nconst reducer = combineReducers({\r\n    notification: notificationReducer,\r\n    user: userReducer,\r\n    token: tokenReducer\r\n})\r\n\r\nconst store = createStore(\r\n    reducer,\r\n    composeWithDevTools(applyMiddleware(thunk))\r\n)\r\n\r\nexport default store"],"sourceRoot":""}