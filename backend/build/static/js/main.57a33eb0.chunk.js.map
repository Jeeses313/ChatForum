{"version":3,"sources":["queries/userqueries.js","reducers/notificationReducer.js","components/Notification.js","reducers/tokenReducer.js","reducers/userReducer.js","components/LoginForm.js","queries/chatqueries.js","queries/commentqueries.js","index.js","components/ChatListing.js","components/ChatForm.js","components/ChatsPage.js","components/Comment.js","components/CommentForm.js","components/Chat.js","components/ChatPage.js","components/ProfilePage.js","components/ErrorPage.js","components/LoggedInPage.js","components/SigninForm.js","reducers/modeReducer.js","components/Navigationbar.js","App.js","store.js"],"names":["timeout","LOGIN","gql","SIGNIN","USER","SET_PROFILEPIC","DELETE_PROFILEPIC","setNotification","notification","time","dispatch","a","clearTimeout","setTimeout","type","reducer","state","action","Notification","useSelector","style","position","width","textAlign","zIndex","useDispatch","clearAlert","error","Alert","variant","className","onClick","message","setToken","token","data","setUser","user","LoginForm","useState","username","setUsername","password","setPassword","history","useHistory","mode","useMutation","onError","graphQLErrors","login","result","useEffect","value","localStorage","setItem","push","JSON","stringify","borderColor","backgroundColor","Form","onSubmit","event","preventDefault","variables","Label","Control","id","name","onChange","target","required","Button","to","CREATE_CHAT","DELETE_CHAT","CHATS","PINNED_CHATS","CHAT_ADDED","CHAT_DELETED","PIN_CHAT","UNPIN_CHAT","wsLink","CREATE_COMMENT","COMMENTS","COMMENT_ADDED","DELETE_COMMENT","COMMENT_DELETED","EDIT_COMMENT","COMMENT_EDITED","Chat","chat","isPinned","submitPin","submitUnpin","currentUser","latestComment","options","weekday","year","month","day","hour","minute","date","Date","toLocaleTimeString","content","length","substring","deleteChat","borderStyle","borderRadius","padding","marginBottom","title","size","admin","window","confirm","chatId","ChatForm","setTitle","create","createChat","resize","chatTitle","Row","Col","md","paddingRight","as","rows","placeholder","block","paddingLeft","height","ChatsPage","chats","setChats","useLazyQuery","loadChats","chatsResult","loadPinnedChats","pinnedChatsResult","chatsToShow","setChatsToShow","filter","setFilter","pinnedChats","setPinnedChats","sortChats","useCallback","chatA","chatB","includes","dateA","dateB","slice","sort","map","useSubscription","onSubscriptionData","newChat","subscriptionData","chatAdded","newChats","concat","newComment","commentAdded","comment","toLowerCase","startsWith","pinChat","pinResult","unpinChat","unpinResult","pchat","deletedChat","chatDeleted","filterStyle","float","paddingBottom","display","overflowY","key","Comment","setContent","editing","setEditing","imageUrl","setImageUrl","deleteComment","deleteResult","editComment","editResult","image","hasVideo","frameBorder","allowFullScreen","src","Image","fluid","profileImage","contentBoxStyle","border","urlStyle","readOnly","commentId","endsWith","CommentForm","onCompleted","send","contentStyle","comments","setComments","commentsToShow","setCommentsToShow","loadComments","commentsResult","commentsEndRef","useRef","commentA","commentB","called","loading","current","scrollIntoView","behavior","newComments","deletedComment","commentDeleted","editedComment","commentEdited","ref","ChatPage","match","useRouteMatch","params","ProfilePage","editImageUrl","setEditImageUrl","loadUser","userResult","setImage","setProfilePic","profilePicResult","setUserProfilePic","deleteProfilePic","deleteProfilePicResult","ErrorPage","errormessage","LoggedInPage","path","SigninForm","signin","createUser","setMode","Navigationbar","Navbar","collapseOnSelect","expand","bg","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","removeItem","App","document","body","left","top","combineReducers","notificationReducer","userReducer","tokenReducer","modeReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","authLink","setContext","_","headers","getItem","authorization","httpLink","HttpLink","uri","location","host","WebSocketLink","reconnect","splitLink","split","query","definition","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","link","defaultOptions","watchQuery","fetchPolicy","mutation","loggedToken","loggedUser","parse","ReactDOM","render","ApolloProvider","getElementById"],"mappings":"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","file":"static/js/main.57a33eb0.chunk.js","sourcesContent":["import { gql } from '@apollo/client'\r\n\r\nexport const LOGIN = gql`\r\n    mutation login($username: String!, $password: String!) {\r\n        login(username: $username, password: $password)  {\r\n            value\r\n            user {\r\n                username\r\n                pinnedChats {\r\n                    title\r\n                }\r\n                admin\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const SIGNIN = gql`\r\n    mutation createUser($username: String!, $password: String!) {\r\n        createUser(username: $username, password: $password)  {\r\n            value\r\n            user {\r\n                username\r\n                pinnedChats {\r\n                    title\r\n                }\r\n                admin\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const USER = gql`\r\n    query user($username: String!) {\r\n        user(username: $username)  {\r\n            username\r\n            imageUrl\r\n        }\r\n    }\r\n`\r\n\r\nexport const SET_PROFILEPIC = gql`\r\nmutation setUserProfilePic($imageUrl: String!) {\r\n    setUserProfilePic(imageUrl: $imageUrl)  {\r\n        username\r\n        imageUrl\r\n    }\r\n}\r\n`\r\n\r\nexport const DELETE_PROFILEPIC = gql`\r\nmutation deleteUserProfilePic {\r\n    deleteUserProfilePic {\r\n        username\r\n        imageUrl\r\n    }\r\n}\r\n`","const reducer = (state = '', action) => {\r\n    switch (action.type) {\r\n        case 'SET NOTIFICATION': {\r\n            return action.notification\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nlet timeout\r\n\r\nexport const setNotification = (notification, time) => {\r\n    return async dispatch => {\r\n        if (notification !== '') {\r\n            clearTimeout(timeout)\r\n            timeout = setTimeout(() => {\r\n                dispatch(setNotification(''))\r\n            }, time * 1000)\r\n        }\r\n        dispatch({\r\n            type: 'SET NOTIFICATION',\r\n            notification: notification\r\n        })\r\n    }\r\n}\r\n\r\nexport default reducer","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Alert } from 'react-bootstrap'\r\nimport { setNotification } from '../reducers/notificationReducer'\r\n\r\nconst Notification = () => {\r\n    const notification = useSelector(state => state.notification)\r\n    const style = { position: 'absolute', width: '100%', textAlign: 'center', zIndex:9999 }\r\n    const dispatch = useDispatch()\r\n    const clearAlert = () => {\r\n        dispatch(setNotification(''))\r\n    }\r\n    if (notification === '') {\r\n        return (\r\n            <></>\r\n        )\r\n    }\r\n    if (notification.error) {\r\n        return (\r\n            <Alert style={style} variant=\"danger\" className='errormessage' onClick={clearAlert}>{notification.message}</Alert>\r\n        )\r\n    }\r\n    return (\r\n        <Alert style={style} variant=\"success\" className='message' onClick={clearAlert}>{notification.message}</Alert>\r\n    )\r\n}\r\n\r\nexport default Notification","const reducer = (state = null, action) => {\r\n    switch (action.type) {\r\n        case 'SET_TOKEN': {\r\n            return action.data\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const setToken = (token) => {\r\n    return async dispatch => {\r\n        dispatch({\r\n            type: 'SET_TOKEN',\r\n            data: token\r\n        })\r\n    }\r\n}\r\n\r\nexport default reducer","const reducer = (state = null, action) => {\r\n    switch (action.type) {\r\n        case 'SET_USER': {\r\n            return action.data\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const setUser = (user) => {\r\n    return async dispatch => {\r\n\r\n        dispatch({\r\n            type: 'SET_USER',\r\n            data: user\r\n        })\r\n    }\r\n}\r\n\r\nexport default reducer","import React, { useState, useEffect } from 'react'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { useMutation } from '@apollo/client'\r\nimport { LOGIN } from '../queries/userqueries'\r\nimport Notification from './Notification'\r\nimport { setNotification } from '../reducers/notificationReducer'\r\nimport { setToken } from '../reducers/tokenReducer'\r\nimport { setUser } from '../reducers/userReducer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory, Link } from 'react-router-dom'\r\n\r\nconst LoginForm = () => {\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const mode = useSelector(state => state.mode)\r\n    const [login, result] = useMutation(LOGIN, {\r\n        onError: (error) => {\r\n            dispatch(setNotification({ message: error.graphQLErrors[0].message, error: true }, 10))\r\n        }\r\n    })\r\n    useEffect(() => {\r\n        if (result.data) {\r\n            const token = result.data.login.value\r\n            const user = result.data.login.user\r\n            dispatch(setToken(token))\r\n            localStorage.setItem('user-token', token)\r\n            history.push('/')\r\n            localStorage.setItem('logged-user', JSON.stringify(user))\r\n            dispatch(setUser(user))\r\n            dispatch(setNotification({ message: 'Logged in', error: false }, 10))\r\n        }\r\n    }, [result.data]) // eslint-disable-line\r\n    const submit = (event) => {\r\n        event.preventDefault()\r\n        login({ variables: { username, password } })\r\n        setUsername('')\r\n        setPassword('')\r\n    }\r\n    const style = { borderColor: 'grey' }\r\n    if (mode === 'light') {\r\n        style.backgroundColor = 'white'\r\n    } else {\r\n        style.backgroundColor = 'darkgray'\r\n    }\r\n    return (\r\n        <>\r\n            <Notification></Notification>\r\n            <div className='container'>\r\n                <h2>Login</h2>\r\n                <Form onSubmit={submit}>\r\n                    <Form.Label>username:</Form.Label>\r\n                    <Form.Control type=\"text\" id='username' style={style} value={username} name=\"username\" onChange={({ target }) => setUsername(target.value)} required />\r\n                    <Form.Label>password:</Form.Label>\r\n                    <Form.Control type=\"password\" id='password' style={style} value={password} name=\"password\" onChange={({ target }) => setPassword(target.value)} required />\r\n                    <Button id='submit' type=\"submit\">login</Button> or <Link to='/signin'>sign in</Link>\r\n                </Form>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LoginForm","import { gql } from '@apollo/client'\r\n\r\nexport const CREATE_CHAT = gql`\r\n    mutation createChat($chatTitle: String!) {\r\n        createChat(chatTitle: $chatTitle)  {\r\n            title\r\n        }\r\n    }\r\n`\r\n\r\nexport const DELETE_CHAT = gql`\r\n    mutation deleteChat($chatId: String!) {\r\n        deleteChat(chatId: $chatId)  {\r\n            title\r\n        }\r\n    }\r\n`\r\n\r\nexport const CHATS = gql`\r\n    query {\r\n        chats {\r\n            title\r\n            latestComment{\r\n                content\r\n                date\r\n                user{\r\n                    username\r\n                }\r\n            }\r\n            id\r\n            date\r\n        }\r\n    }\r\n`\r\n\r\nexport const PINNED_CHATS = gql`\r\n    query {\r\n        pinnedChats {\r\n            title\r\n        }\r\n    }\r\n`\r\n\r\nexport const CHAT_ADDED = gql`\r\n    subscription {\r\n        chatAdded {\r\n            title\r\n            latestComment {\r\n                content\r\n                date\r\n                user {\r\n                    username\r\n                }\r\n            }\r\n            date\r\n        }\r\n    }\r\n`\r\n\r\nexport const CHAT_DELETED= gql`\r\n    subscription {\r\n        chatDeleted {\r\n            title\r\n            id\r\n        }\r\n    }\r\n`\r\n\r\nexport const PIN_CHAT = gql`\r\n    mutation pinChat($chatTitle: String!) {\r\n        pinChat(chatTitle: $chatTitle)  {\r\n            title\r\n        }\r\n    }\r\n`\r\n\r\nexport const UNPIN_CHAT = gql`\r\n    mutation unpinChat($chatTitle: String!) {\r\n        unpinChat(chatTitle: $chatTitle)  {\r\n            title\r\n        }\r\n    }\r\n`","import { gql } from '@apollo/client'\r\n\r\nexport const CREATE_COMMENT = gql`\r\n    mutation createComment($chatTitle: String!, $content: String!, $imageUrl: String) {\r\n        createComment(chatTitle: $chatTitle, content: $content, imageUrl: $imageUrl)  {\r\n            content\r\n            date\r\n            imageUrl\r\n            hasVideo\r\n            user{\r\n                username\r\n                imageUrl\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const COMMENTS = gql`\r\n    query comments($chatTitle: String){\r\n        comments(chatTitle: $chatTitle) {\r\n            content\r\n            date\r\n            user{\r\n                username\r\n                imageUrl\r\n            }\r\n            imageUrl\r\n            hasVideo\r\n            id\r\n        }\r\n    }\r\n`\r\n\r\nexport const COMMENT_ADDED = gql`\r\n    subscription {\r\n        commentAdded {\r\n            comment {\r\n                user { \r\n                    username\r\n                    imageUrl\r\n                }\r\n                date\r\n                content\r\n                imageUrl\r\n                hasVideo\r\n                id\r\n            }\r\n            chatTitle\r\n        }\r\n    }\r\n`\r\n\r\nexport const DELETE_COMMENT = gql`\r\n    mutation deleteComment($commentId: String!) {\r\n        deleteComment(commentId: $commentId)  {\r\n            content\r\n            id\r\n        }\r\n    }\r\n`\r\n\r\nexport const COMMENT_DELETED = gql`\r\n    subscription {\r\n        commentDeleted {\r\n            content\r\n            imageUrl\r\n            id\r\n        }\r\n    }\r\n`\r\n\r\nexport const EDIT_COMMENT = gql`\r\n    mutation editComment($commentId: String!, $content: String!, $imageUrl: String) {\r\n        editComment(\r\n            commentId: $commentId\r\n            content: $content\r\n            imageUrl: $imageUrl\r\n        ){\r\n            content\r\n            id\r\n        }\r\n    }\r\n`\r\n\r\nexport const COMMENT_EDITED = gql`\r\n    subscription {\r\n        commentEdited {\r\n            content\r\n            id\r\n            imageUrl\r\n            hasVideo\r\n        }\r\n    }\r\n`","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport { ApolloClient, ApolloProvider, HttpLink, InMemoryCache, split } from '@apollo/client'\r\nimport { setContext } from 'apollo-link-context'\r\nimport { getMainDefinition } from '@apollo/client/utilities'\r\nimport { WebSocketLink } from '@apollo/link-ws'\r\nimport { BrowserRouter as Router } from 'react-router-dom'\r\nimport { Provider } from 'react-redux'\r\nimport store from './store'\r\nimport { setUser } from './reducers/userReducer'\r\nimport { setToken } from './reducers/tokenReducer'\r\nconst authLink = setContext((_, { headers }) => {\r\n    const token = localStorage.getItem('user-token')\r\n    return {\r\n        headers: {\r\n            ...headers,\r\n            authorization: token ? `bearer ${token}` : null\r\n        }\r\n    }\r\n})\r\n\r\n\r\nconst defaultOptions = {\r\n    watchQuery: {\r\n        fetchPolicy: 'no-cache'\r\n    },\r\n    query: {\r\n        fetchPolicy: 'no-cache'\r\n    },\r\n    mutation: {\r\n        fetchPolicy: 'no-cache'\r\n    }\r\n}\r\n\r\nconst httpLink = new HttpLink({ uri: '/graphql' })\r\n\r\nlet wsLink\r\nif (window.location.host.includes('localhost')) {\r\n    wsLink = new WebSocketLink({\r\n        uri: `ws://${window.location.host}/graphql`,\r\n        options: { reconnect: true }\r\n    })\r\n} else {\r\n    wsLink = new WebSocketLink({\r\n        uri: `wss://${window.location.host}/graphql`,\r\n        options: { reconnect: true }\r\n    })\r\n}\r\nconst splitLink = split(({ query }) => {\r\n    const definition = getMainDefinition(query)\r\n    return (definition.kind === 'OperationDefinition' && definition.operation === 'subscription')\r\n}, wsLink, authLink.concat(httpLink))\r\n\r\nconst client = new ApolloClient({\r\n    cache: new InMemoryCache(),\r\n    link: splitLink,\r\n    defaultOptions: defaultOptions\r\n})\r\n\r\n\r\n\r\n\r\nconst loggedToken = localStorage.getItem('user-token')\r\nconst loggedUser = localStorage.getItem('logged-user')\r\nif (loggedToken) {\r\n    store.dispatch(setToken(loggedToken))\r\n}\r\nif (loggedUser) {\r\n    store.dispatch(setUser(JSON.parse(loggedUser)))\r\n}\r\nReactDOM.render(<ApolloProvider client={client}><Provider store={store}><Router><App /></Router></Provider></ApolloProvider>, document.getElementById('root'))","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button } from 'react-bootstrap'\r\nimport { useMutation } from '@apollo/client'\r\nimport { DELETE_CHAT } from '../queries/chatqueries'\r\nimport { setNotification } from '../reducers/notificationReducer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nconst Chat = ({ chat, isPinned, submitPin, submitUnpin }) => {\r\n    const dispatch = useDispatch()\r\n    const currentUser = useSelector(state => state.user)\r\n    let latestComment = 'No comments yet.'\r\n    const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' }\r\n    let date = new Date(chat.date).toLocaleTimeString([], options)\r\n    if (chat.latestComment) {\r\n        if (chat.latestComment.content.length > 30) {\r\n            latestComment = `${chat.latestComment.content.substring(0, 30)}... -${chat.latestComment.user.username}`\r\n        } else {\r\n            latestComment = `${chat.latestComment.content} -${chat.latestComment.user.username}`\r\n        }\r\n        date = new Date(chat.latestComment.date).toLocaleTimeString([], options)\r\n    }\r\n    const [deleteChat, result] = useMutation(DELETE_CHAT, { // eslint-disable-line\r\n        onError: (error) => {\r\n            dispatch(setNotification({ message: error.graphQLErrors[0].message, error: true }, 10))\r\n        }\r\n    })\r\n    const submitDelete = () => {\r\n        if (window.confirm('Delete chat?')) {\r\n            deleteChat({ variables: { chatId: chat.id } })\r\n        }\r\n    }\r\n    const styleBox = {\r\n        borderStyle: 'solid',\r\n        borderRadius: '5px',\r\n        padding: '10px',\r\n        marginBottom: '10px'\r\n    }\r\n    return (\r\n        <div style={styleBox}>\r\n            <div>\r\n                <Link to={`/chats/${chat.title}`}>{chat.title}</Link>\r\n            </div>\r\n            <div>\r\n                {latestComment}\r\n            </div>\r\n            <div>\r\n                {date}&nbsp;\r\n                {isPinned ?\r\n                    <Button type='button' size='sm' onClick={() => submitUnpin(chat)}>Unpin</Button>\r\n                    :\r\n                    <Button type='button' size='sm' onClick={() => submitPin(chat)}>Pin</Button>\r\n                }\r\n                {currentUser.admin ?\r\n                    <Button type='button' size='sm' onClick={submitDelete}>Delete</Button>\r\n                    :\r\n                    <></>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat","import React, { useState, useEffect } from 'react'\r\nimport { Form, Button, Row, Col } from 'react-bootstrap'\r\nimport { useMutation } from '@apollo/client'\r\nimport { CREATE_CHAT } from '../queries/chatqueries'\r\nimport { setNotification } from '../reducers/notificationReducer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst ChatForm = () => {\r\n    const [title, setTitle] = useState('')\r\n    const dispatch = useDispatch()\r\n    const mode = useSelector(state => state.mode)\r\n    const history = useHistory()\r\n    const [create, result] = useMutation(CREATE_CHAT, { // eslint-disable-line\r\n        onError: (error) => {\r\n            dispatch(setNotification({ message: error.graphQLErrors[0].message, error: true }, 10))\r\n        }\r\n    })\r\n    const submit = (event) => {\r\n        event.preventDefault()\r\n        create({ variables: { chatTitle: title } })\r\n        setTitle('')\r\n    }\r\n    useEffect(() => {\r\n        if (result.data) {\r\n            dispatch(setNotification({ message: 'New chat created', error: false }, 10))\r\n            history.push(`/chats/${result.data.createChat.title}`)\r\n        }\r\n    }, [result.data]) // eslint-disable-line\r\n    const style = { resize: 'none', borderColor: 'grey' }\r\n    if (mode === 'light') {\r\n        style.backgroundColor = 'white'\r\n    } else {\r\n        style.backgroundColor = 'darkgray'\r\n    }\r\n    return (\r\n        <>\r\n            <Form onSubmit={submit}>\r\n                <Row size=\"lg\">\r\n                    <Col md=\"10\" style={{ paddingRight: '0' }}>\r\n                        <Form.Control as=\"textarea\" rows=\"1\" style={style} id='content' value={title} name=\"content\" onChange={({ target }) => setTitle(target.value)} placeholder='Title...' required block='true' />\r\n                    </Col>\r\n                    <Col md=\"2\" style={{ paddingLeft: '0' }}>\r\n                        <Button style={{ height: '100%' }} id='submit' type=\"submit\" size=\"lg\" block='true'>Start new chat</Button>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ChatForm","import React, { useState, useEffect, useCallback } from 'react'\r\nimport { useLazyQuery, useSubscription, useMutation } from '@apollo/client'\r\nimport { CHAT_ADDED, CHATS, PINNED_CHATS, CHAT_DELETED } from '../queries/chatqueries'\r\nimport { COMMENT_ADDED } from '../queries/commentqueries'\r\nimport Chat from './ChatListing'\r\nimport ChatForm from './ChatForm'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { UNPIN_CHAT, PIN_CHAT } from '../queries/chatqueries'\r\nimport { setNotification } from '../reducers/notificationReducer'\r\n\r\nconst ChatsPage = () => {\r\n    const dispatch = useDispatch()\r\n    const mode = useSelector(state => state.mode)\r\n    const [chats, setChats] = useState([])\r\n    const [loadChats, chatsResult] = useLazyQuery(CHATS)\r\n    const [loadPinnedChats, pinnedChatsResult] = useLazyQuery(PINNED_CHATS)\r\n    const [chatsToShow, setChatsToShow] = useState([])\r\n    const [filter, setFilter] = useState('')\r\n    const [pinnedChats, setPinnedChats] = useState()\r\n    const sortChats = useCallback((chatA, chatB) => {\r\n        if (!pinnedChats) {\r\n            return 0\r\n        }\r\n        if (pinnedChats.includes(chatA.title) && !pinnedChats.includes(chatB.title)) {\r\n            return -1\r\n        }\r\n        if (!pinnedChats.includes(chatA.title) && pinnedChats.includes(chatB.title)) {\r\n            return 1\r\n        }\r\n        let dateA = chatA.date\r\n        if (chatA.latestComment) {\r\n            dateA = chatA.latestComment.date\r\n        }\r\n        let dateB = chatB.date\r\n        if (chatB.latestComment) {\r\n            dateB = chatB.latestComment.date\r\n        }\r\n        return dateB - dateA\r\n    }, [pinnedChats])\r\n    useEffect(() => {\r\n        loadChats()\r\n        loadPinnedChats()\r\n    }, []) //eslint-disable-line\r\n    useEffect(() => {\r\n        if (chatsResult.data) {\r\n            setChats(chatsResult.data.chats.slice(0).sort(sortChats))\r\n            setChatsToShow(chats)\r\n        }\r\n    }, [chatsResult.data]) //eslint-disable-line\r\n    useEffect(() => {\r\n        if (pinnedChatsResult.data) {\r\n            setPinnedChats(pinnedChatsResult.data.pinnedChats.map(chat => chat.title))\r\n        }\r\n    }, [pinnedChatsResult.data]) //eslint-disable-line\r\n    useSubscription(CHAT_ADDED, {\r\n        onSubscriptionData: ({ subscriptionData }) => {\r\n            const newChat = subscriptionData.data.chatAdded\r\n            const newChats = chats.concat(newChat)\r\n            newChats.sort(sortChats)\r\n            setChats(newChats)\r\n        }\r\n    })\r\n    useSubscription(COMMENT_ADDED, {\r\n        onSubscriptionData: ({ subscriptionData }) => {\r\n            const newComment = subscriptionData.data.commentAdded.comment\r\n            const chatTitle = subscriptionData.data.commentAdded.chatTitle\r\n            const newChats = chats.map(chat => chat.title === chatTitle ? { ...chat, latestComment: newComment } : chat)\r\n            newChats.sort(sortChats)\r\n            setChats(newChats)\r\n        }\r\n    })\r\n    useEffect(() => {\r\n        if (filter === '') {\r\n            setChatsToShow(chats.slice(0).sort(sortChats))\r\n        } else {\r\n            setChatsToShow(chats.filter(chat => chat.title.toLowerCase().startsWith(filter.toLowerCase())).sort(sortChats))\r\n        }\r\n    }, [filter, chats, sortChats])\r\n    const [pinChat, pinResult] = useMutation(PIN_CHAT, { // eslint-disable-line\r\n        onError: (error) => {\r\n            dispatch(setNotification({ message: error.graphQLErrors[0].message, error: true }, 10))\r\n        }\r\n    })\r\n    const [unpinChat, unpinResult] = useMutation(UNPIN_CHAT, { // eslint-disable-line\r\n        onError: (error) => {\r\n            dispatch(setNotification({ message: error.graphQLErrors[0].message, error: true }, 10))\r\n        }\r\n    })\r\n    const submitPin = (chat) => {\r\n        if (window.confirm('Pin chat?')) {\r\n            pinChat({ variables: { chatTitle: chat.title } })\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (pinResult.data) {\r\n            setPinnedChats(pinnedChats.concat(pinResult.data.pinChat.title))\r\n            dispatch(setNotification({ message: 'Chat pinned', error: false }, 10))\r\n        }\r\n    }, [pinResult.data]) // eslint-disable-line\r\n    const submitUnpin = (chat) => {\r\n        if (window.confirm('Unpin chat?')) {\r\n            unpinChat({ variables: { chatTitle: chat.title } })\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (unpinResult.data) {\r\n            setPinnedChats(pinnedChats.filter(pchat => pchat !== unpinResult.data.unpinChat.title))\r\n            dispatch(setNotification({ message: 'Chat unpinned', error: false }, 10))\r\n        }\r\n    }, [unpinResult.data]) // eslint-disable-line\r\n    useSubscription(CHAT_DELETED, {\r\n        onSubscriptionData: ({ subscriptionData }) => {\r\n            const deletedChat = subscriptionData.data.chatDeleted\r\n            setChats(chats.filter(chat => chat.id !== deletedChat.id))\r\n        }\r\n    })\r\n    const styleBox = {\r\n        borderStyle: 'solid',\r\n        borderRadius: '5px',\r\n        borderColor: 'grey',\r\n        padding: '10px',\r\n        marginBottom: '0',\r\n        overflowY: 'scroll',\r\n        height: '77.5vh'\r\n    }\r\n    const filterStyle = { float: 'right', width: '30%', paddingBottom: '0', borderColor: 'grey' }\r\n    if (mode === 'light') {\r\n        filterStyle.backgroundColor = 'white'\r\n    } else {\r\n        filterStyle.backgroundColor = 'darkgray'\r\n    }\r\n    return (\r\n        <div style={{ height: '100%' }}>\r\n            <h2 style={{ display: 'inline-block', marginBottom: '0' }}>Chats</h2>\r\n            <input style={filterStyle} type='text' value={filter} onChange={({ target }) => setFilter(target.value)} placeholder='Filter chats by title...'></input>\r\n            <div style={styleBox}>\r\n                {pinnedChats ?\r\n                    <>\r\n                        {chatsToShow.map(chat =>\r\n                            <Chat key={chat.id} chat={chat} submitPin={submitPin} submitUnpin={submitUnpin} isPinned={pinnedChats.includes(chat.title)}></Chat>\r\n                        )}\r\n                    </>\r\n                    :\r\n                    <div>Loading</div>\r\n                }\r\n\r\n            </div>\r\n            <ChatForm></ChatForm>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatsPage","import React, { useEffect, useState } from 'react'\r\nimport { useMutation } from '@apollo/client'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setNotification } from '../reducers/notificationReducer'\r\nimport { Button, Image } from 'react-bootstrap'\r\nimport { DELETE_COMMENT, EDIT_COMMENT } from '../queries/commentqueries'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Comment = ({ comment }) => {\r\n    const dispatch = useDispatch()\r\n    const currentUser = useSelector(state => state.user)\r\n    const mode = useSelector(state => state.mode)\r\n    const [content, setContent] = useState(comment.content)\r\n    const [editing, setEditing] = useState(false)\r\n    const [imageUrl, setImageUrl] = useState(comment.imageUrl)\r\n    const [deleteComment, deleteResult] = useMutation(DELETE_COMMENT, { // eslint-disable-line\r\n        onError: (error) => {\r\n            dispatch(setNotification({ message: error.graphQLErrors[0].message, error: true }, 10))\r\n        }\r\n    })\r\n    const [editComment, editResult] = useMutation(EDIT_COMMENT, { // eslint-disable-line\r\n        onError: (error) => {\r\n            dispatch(setNotification({ message: error.graphQLErrors[0].message, error: true }, 10))\r\n        }\r\n    })\r\n    const submitDelete = () => {\r\n        if (window.confirm('Delete comment?')) {\r\n            deleteComment({ variables: { commentId: comment.id } })\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (deleteResult.data) {\r\n            dispatch(setNotification({ message: 'Comment deleted', error: false }, 10))\r\n        }\r\n    }, [deleteResult.data]) // eslint-disable-line\r\n    let image = <></>\r\n    if (comment.imageUrl) {\r\n        if (comment.hasVideo) {\r\n            image = <><iframe width=\"420\" height=\"315\"\r\n                frameBorder='0'\r\n                allowFullScreen\r\n                title='video'\r\n                src={comment.imageUrl}>\r\n            </iframe><br /></>\r\n        } else {\r\n            image = <><Image src={comment.imageUrl} fluid></Image><br /></>\r\n        }\r\n    }\r\n    let profileImage = <></>\r\n    if (comment.user.imageUrl) {\r\n        profileImage = <><Image style={{ height: '10%', width: '10%' }} src={comment.user.imageUrl} fluid></Image></>\r\n    }\r\n    const submitEdit = () => {\r\n        if (window.confirm('Edit comment?')) {\r\n            editComment({ variables: { commentId: comment.id, content: content, imageUrl: imageUrl } })\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (editResult.data) {\r\n            setEditing(false)\r\n            dispatch(setNotification({ message: 'Comment edited', error: false }, 10))\r\n        }\r\n    }, [editResult.data]) // eslint-disable-line\r\n    const stopEditing = () => {\r\n        setEditing(false)\r\n        setImageUrl(comment.imageUrl)\r\n        setContent(comment.content)\r\n    }\r\n    const startEditing = () => {\r\n        setEditing(true)\r\n        if (comment.content.endsWith(' -edited')) {\r\n            setContent(comment.content.substring(0, comment.content.length - 8))\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        setContent(comment.content)\r\n    }, [comment])\r\n    const styleBox = {\r\n        borderStyle: 'solid',\r\n        borderRadius: '5px',\r\n        padding: '10px',\r\n        marginBottom: '10px'\r\n    }\r\n    const contentBoxStyle = {\r\n        width: '100%',\r\n        resize: 'none',\r\n        border: 'none'\r\n    }\r\n    const urlStyle = { borderColor: 'grey', width: '100%' }\r\n    if (mode === 'light') {\r\n        contentBoxStyle.backgroundColor = 'white'\r\n        urlStyle.backgroundColor = 'white'\r\n    } else {\r\n        contentBoxStyle.backgroundColor = 'darkgray'\r\n        urlStyle.backgroundColor = 'darkgray'\r\n    }\r\n    const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' }\r\n    const date = new Date(comment.date).toLocaleTimeString([], options)\r\n    return (\r\n        <div style={styleBox}>\r\n            <div>\r\n                {profileImage} <Link to={`/users/${comment.user.username}`}>{comment.user.username}</Link> {date}\r\n            </div>\r\n            <textarea rows='2' value={content} readOnly={!editing} style={contentBoxStyle} onChange={({ target }) => setContent(target.value)} block='true' />\r\n            {image}\r\n            {editing ?\r\n                <>\r\n                    <input type='text' style={urlStyle} placeholder=\"Image/video url...\" value={imageUrl} onChange={({ target }) => setImageUrl(target.value)} block='true'></input><br />\r\n                </>\r\n                :\r\n                <></>\r\n            }\r\n            {(currentUser.username === comment.user.username || currentUser.admin) && (comment.content !== 'Comment deleted') ?\r\n                <>\r\n                    <Button type='button' size='sm' onClick={submitDelete}>Delete comment</Button>\r\n                    {editing ?\r\n                        <>\r\n                            <Button type='button' size='sm' onClick={stopEditing}>Stop editing</Button>\r\n                            <Button type='button' size='sm' onClick={submitEdit}>Submit edit</Button>\r\n                        </>\r\n                        :\r\n                        <>\r\n                            {(currentUser.username === comment.user.username) ?\r\n                                <Button type='button' size='sm' onClick={startEditing}>Start editing</Button>\r\n                                :\r\n                                <></>\r\n                            }\r\n                        </>\r\n                    }\r\n                </>\r\n                :\r\n                <></>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Comment","import React, { useState } from 'react'\r\nimport { Form, Button, Row, Col } from 'react-bootstrap'\r\nimport { useMutation } from '@apollo/client'\r\nimport { CREATE_COMMENT } from '../queries/commentqueries'\r\nimport { setNotification } from '../reducers/notificationReducer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nconst CommentForm = ({ title }) => {\r\n    const [content, setContent] = useState('')\r\n    const [imageUrl, setImageUrl] = useState('')\r\n    const dispatch = useDispatch()\r\n    const mode = useSelector(state => state.mode)\r\n    const [send, result] = useMutation(CREATE_COMMENT, { // eslint-disable-line\r\n        onCompleted: () => {\r\n            setContent('')\r\n            setImageUrl('')\r\n        },\r\n        onError: (error) => {\r\n            dispatch(setNotification({ message: error.graphQLErrors[0].message, error: true }, 10))\r\n        }\r\n    })\r\n    const submit = (event) => {\r\n        event.preventDefault()\r\n        send({ variables: { chatTitle: title, content, imageUrl } })\r\n    }\r\n    const contentStyle = { resize: 'none', borderColor: 'grey' }\r\n    const urlStyle = { borderColor: 'grey' }\r\n    if (mode === 'light') {\r\n        contentStyle.backgroundColor = 'white'\r\n        urlStyle.backgroundColor = 'white'\r\n    } else {\r\n        contentStyle.backgroundColor = 'darkgray'\r\n        urlStyle.backgroundColor = 'darkgray'\r\n    }\r\n    return (\r\n        <div>\r\n            <Form onSubmit={submit}>\r\n                <Row size='lg'>\r\n                    <Col md='10' style={{ paddingRight: '0' }}>\r\n                        <Form.Control as='textarea' rows='2' style={contentStyle} id='content' value={content} name='content' onChange={({ target }) => setContent(target.value)} placeholder='New comment...' required block='true' />\r\n                        <Form.Control style={urlStyle} size=\"sm\" type=\"text\" placeholder=\"Image/video url...\" value={imageUrl} name='imageUrl' id='imageUrl' onChange={({ target }) => setImageUrl(target.value)} block='true'></Form.Control>\r\n                    </Col>\r\n                    <Col md='2' style={{ paddingLeft: '0' }}>\r\n                        <Button style={{ height: '100%' }} id='submit' type='submit' size='lg' block>Send</Button>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CommentForm","import React, { useState, useEffect, useRef } from 'react'\r\nimport { useLazyQuery, useSubscription } from '@apollo/client'\r\nimport { COMMENT_ADDED, COMMENTS, COMMENT_DELETED, COMMENT_EDITED } from '../queries/commentqueries'\r\nimport Comment from './Comment'\r\nimport CommentForm from './CommentForm'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { useSelector } from 'react-redux'\r\n\r\nconst Chat = ({ title }) => {\r\n    const [comments, setComments] = useState([])\r\n    const history = useHistory()\r\n    const mode = useSelector(state => state.mode)\r\n    const [commentsToShow, setCommentsToShow] = useState([])\r\n    const [filter, setFilter] = useState('')\r\n    const [loadComments, commentsResult] = useLazyQuery(COMMENTS)\r\n    const commentsEndRef = useRef(null)\r\n    const scrollToBottom = () => {\r\n        commentsEndRef.current.scrollIntoView({ behavior: 'smooth' })\r\n    }\r\n    useEffect(() => {\r\n        loadComments({ variables: { chatTitle: title } })\r\n    }, []) //eslint-disable-line\r\n    useEffect(() => {\r\n        loadComments({ variables: { chatTitle: title } })\r\n    }, [title]) //eslint-disable-line\r\n    useEffect(() => {\r\n        if (commentsResult.data) {\r\n            setComments(commentsResult.data.comments.sort((commentA, commentB) => {\r\n                return commentA.date - commentB.date\r\n            }))\r\n        } else if (commentsResult.called && !commentsResult.loading) {\r\n            history.push('/error/Chat does not exist')\r\n        }\r\n    }, [commentsResult]) //eslint-disable-line\r\n    useEffect(scrollToBottom, [comments, commentsToShow])\r\n    useSubscription(COMMENT_ADDED, {\r\n        onSubscriptionData: ({ subscriptionData }) => {\r\n            const newComment = subscriptionData.data.commentAdded.comment\r\n            const chatTitle = subscriptionData.data.commentAdded.chatTitle\r\n            if (chatTitle === title) {\r\n                const newComments = comments.concat(newComment)\r\n                newComments.sort((commentA, commentB) => {\r\n                    return commentA.date - commentB.date\r\n                })\r\n                setComments(newComments)\r\n            }\r\n        }\r\n    })\r\n    useSubscription(COMMENT_DELETED, {\r\n        onSubscriptionData: ({ subscriptionData }) => {\r\n            const deletedComment = subscriptionData.data.commentDeleted\r\n            setComments(comments.map(comment => comment.id === deletedComment.id ? { ...comment, content: deletedComment.content, imageUrl: deletedComment.imageUrl } : comment))\r\n        }\r\n    })\r\n    useSubscription(COMMENT_EDITED, {\r\n        onSubscriptionData: ({ subscriptionData }) => {\r\n            const editedComment = subscriptionData.data.commentEdited\r\n            setComments(comments.map(comment => comment.id === editedComment.id ? { ...comment, content: editedComment.content, imageUrl: editedComment.imageUrl, hasVideo: editedComment.hasVideo } : comment))\r\n        }\r\n    })\r\n    useEffect(() => {\r\n        if (filter === '') {\r\n            setCommentsToShow(comments)\r\n        } else {\r\n            setCommentsToShow(comments.filter(comment => comment.content.toLowerCase().includes(filter.toLowerCase())))\r\n        }\r\n    }, [filter, comments])\r\n    const styleBox = {\r\n        borderStyle: 'solid',\r\n        borderRadius: '5px',\r\n        borderColor: 'grey',\r\n        padding: '10px',\r\n        marginBottom: '0',\r\n        overflowY: 'scroll',\r\n        height: '70vh',\r\n        width: '100%'\r\n    }\r\n    const filterStyle = { float: 'right', width: '30%', paddingBottom: '0', borderColor: 'grey' }\r\n    if (mode === 'light') {\r\n        filterStyle.backgroundColor = 'white'\r\n    } else {\r\n        filterStyle.backgroundColor = 'darkgray'\r\n    }\r\n    return (\r\n        <>\r\n            <input style={filterStyle} type='text' value={filter} onChange={({ target }) => setFilter(target.value)} placeholder='Filter comments by content...'></input>\r\n            <br />\r\n            <div style={styleBox}>\r\n                {comments.length === 0 ?\r\n                    <div>No comments yet</div>\r\n                    :\r\n                    commentsToShow.map(comment =>\r\n                        <Comment key={comment.id} comment={comment}></Comment>\r\n                    )\r\n                }\r\n                <div ref={commentsEndRef} />\r\n            </div>\r\n            <CommentForm title={title}></CommentForm>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Chat","import React from 'react'\r\nimport Chat from './Chat'\r\nimport { useRouteMatch } from 'react-router-dom'\r\n\r\nconst ChatPage = () => {\r\n    const match = useRouteMatch('/chats/:title')\r\n    const title = match ? match.params.title : null\r\n    return (\r\n        <div>\r\n            <h2 style={{ display: 'inline-block', marginBottom: '0' }}>{title}</h2>\r\n            <Chat title={title}></Chat>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatPage","import React, { useEffect, useState } from 'react'\r\nimport { useRouteMatch } from 'react-router-dom'\r\nimport { useLazyQuery } from '@apollo/client'\r\nimport { USER } from '../queries/userqueries'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { Button, Image } from 'react-bootstrap'\r\nimport { SET_PROFILEPIC, DELETE_PROFILEPIC } from '../queries/userqueries'\r\nimport { setNotification } from '../reducers/notificationReducer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useMutation } from '@apollo/client'\r\nimport Chat from './Chat'\r\n\r\nconst ProfilePage = () => {\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const currentUser = useSelector(state => state.user)\r\n    const match = useRouteMatch('/users/:username')\r\n    const [user, setUser] = useState(null)\r\n    const [imageUrl, setImageUrl] = useState('')\r\n    const [editImageUrl, setEditImageUrl] = useState(false)\r\n    const username = match ? match.params.username : null\r\n    const [loadUser, userResult] = useLazyQuery(USER)\r\n    const [image, setImage] = useState(<></>)\r\n    useEffect(() => {\r\n        loadUser({ variables: { username } })\r\n    }, [username]) //eslint-disable-line\r\n    useEffect(() => {\r\n        if (userResult.data) {\r\n            setUser(userResult.data.user)\r\n        } else if (userResult.called && !userResult.loading) {\r\n            history.push('/error/User does not exist')\r\n        }\r\n    }, [userResult]) //eslint-disable-line\r\n    const [setProfilePic, profilePicResult] = useMutation(SET_PROFILEPIC, { // eslint-disable-line\r\n        onError: (error) => {\r\n            dispatch(setNotification({ message: error.graphQLErrors[0].message, error: true }, 10))\r\n        }\r\n    })\r\n    const submitSetImage = () => {\r\n        if (window.confirm('Set profile picture?')) {\r\n            setProfilePic({ variables: { imageUrl } })\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (profilePicResult.data) {\r\n            dispatch(setNotification({ message: 'Profile picture set', error: false }, 10))\r\n            setUser({ ...user, imageUrl: profilePicResult.data.setUserProfilePic.imageUrl })\r\n            setImageUrl('')\r\n            setEditImageUrl(false)\r\n            setImage(<><Image style={{ height: '10%', width: '10%' }} src={profilePicResult.data.setUserProfilePic.imageUrl} fluid></Image><br /></>)\r\n        }\r\n    }, [profilePicResult.data]) // eslint-disable-line\r\n    const [deleteProfilePic, deleteProfilePicResult] = useMutation(DELETE_PROFILEPIC, { // eslint-disable-line\r\n        onError: (error) => {\r\n            dispatch(setNotification({ message: error.graphQLErrors[0].message, error: true }, 10))\r\n        }\r\n    })\r\n    const submitDeleteImage = () => {\r\n        if (window.confirm('Delete profile picture?')) {\r\n            deleteProfilePic()\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (deleteProfilePicResult.data) {\r\n            dispatch(setNotification({ message: 'Profile picture deleted', error: false }, 10))\r\n            setUser({ ...user, imageUrl: null })\r\n            setImageUrl('')\r\n            setEditImageUrl(false)\r\n            setImage(<></>)\r\n        }\r\n    }, [deleteProfilePicResult.data]) // eslint-disable-line\r\n    const stopEditing = () => {\r\n        setEditImageUrl(false)\r\n        setImageUrl('')\r\n    }\r\n    useEffect(() => {\r\n        if (user && user.imageUrl) {\r\n            setImage(<><Image style={{ height: '100%', width: '100%' }} src={user.imageUrl} fluid></Image><br /></>)\r\n        }\r\n    }, [user])\r\n    return (\r\n        <>\r\n            {user ?\r\n                <div className=\"row\">\r\n                    <div className=\"col-3\">\r\n                        <div className=\"row\" >\r\n                            <div>{image}</div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <h2>{user.username}</h2>\r\n                        </div>\r\n                        <div className=\"row\" >\r\n                            {user.username === currentUser.username ?\r\n                                <>\r\n                                    {editImageUrl ?\r\n                                        <>\r\n                                            <div className=\"row\">\r\n                                                <input type='text' placeholder='Url of the image...' value={imageUrl} onChange={({ target }) => setImageUrl(target.value)}></input>\r\n                                            </div>\r\n                                            <div className=\"row\">\r\n                                                <Button type='button' size='sm' onClick={stopEditing}>Back</Button>\r\n                                                {user.imageUrl ?\r\n                                                    <Button type='button' size='sm' onClick={submitDeleteImage}>Delete image</Button>\r\n                                                    :\r\n                                                    <></>\r\n                                                }\r\n                                                <Button type='button' size='sm' onClick={submitSetImage}>Submit image</Button>\r\n                                            </div>\r\n                                        </>\r\n                                        :\r\n                                        <Button type='button' size='sm' onClick={() => setEditImageUrl(true)}>Set image</Button>\r\n                                    }\r\n                                </>\r\n                                :\r\n                                <></>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-9\">\r\n                        <div>\r\n                            <h2 style={{ display: 'inline-block', marginBottom: '0' }}>{`${username}'s chat`}</h2>\r\n                            <Chat title={`userChat${username}`}></Chat>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                :\r\n                <></>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProfilePage","import React from 'react'\r\nimport { useRouteMatch } from 'react-router-dom'\r\n\r\nconst ErrorPage = () => {\r\n    const match = useRouteMatch('/error/:errormessage')\r\n    const errormessage = match ? match.params.errormessage : null\r\n\r\n    return (\r\n        <h2>{errormessage}</h2>\r\n    )\r\n}\r\n\r\nexport default ErrorPage","import React from 'react'\r\nimport ChatsPage from './ChatsPage'\r\nimport ChatPage from './ChatPage'\r\nimport ProfilePage from './ProfilePage'\r\nimport { Switch, Route, Redirect } from 'react-router-dom'\r\nimport ErrorPage from './ErrorPage'\r\n\r\nconst LoggedInPage = () => {\r\n    return (\r\n        <div className='container' style={{ height: '100%' }}>\r\n            <Switch>\r\n                <Route path='/error/:errormessage'>\r\n                    <ErrorPage></ErrorPage>\r\n                </Route>\r\n                <Route path='/chats/:title'>\r\n                    <ChatPage></ChatPage>\r\n                </Route>\r\n                <Route path='/chats'>\r\n                    <ChatsPage></ChatsPage>\r\n                </Route>\r\n                <Route path='/users/:username'>\r\n                    <ProfilePage></ProfilePage>\r\n                </Route>\r\n                <Route path='/'>\r\n                    <Redirect to='/chats'></Redirect>\r\n                </Route>\r\n            </Switch>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoggedInPage","import React, { useState, useEffect } from 'react'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { useMutation } from '@apollo/client'\r\nimport { SIGNIN } from '../queries/userqueries'\r\nimport Notification from './Notification'\r\nimport { setNotification } from '../reducers/notificationReducer'\r\nimport { setToken } from '../reducers/tokenReducer'\r\nimport { setUser } from '../reducers/userReducer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory, Link } from 'react-router-dom'\r\n\r\nconst SigninForm = () => {\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const mode = useSelector(state => state.mode)\r\n    const [signin, result] = useMutation(SIGNIN, {\r\n        onError: (error) => {\r\n            dispatch(setNotification({ message: error.graphQLErrors[0].message, error: true }, 10))\r\n        }\r\n    })\r\n    useEffect(() => {\r\n        if (result.data) {\r\n            const token = result.data.createUser.value\r\n            const user = result.data.createUser.user\r\n            dispatch(setToken(token))\r\n            localStorage.setItem('user-token', token)\r\n            history.push('/')\r\n            localStorage.setItem('logged-user', JSON.stringify(user))\r\n            dispatch(setUser(user))\r\n            dispatch(setNotification({ message: 'Signed in', error: false }, 10))\r\n        }\r\n    }, [result.data]) // eslint-disable-line\r\n    const submit = (event) => {\r\n        event.preventDefault()\r\n        signin({ variables: { username, password } })\r\n        setUsername('')\r\n        setPassword('')\r\n    }\r\n    const style = { borderColor: 'grey' }\r\n    if (mode === 'light') {\r\n        style.backgroundColor = 'white'\r\n    } else {\r\n        style.backgroundColor = 'darkgray'\r\n    }\r\n    return (\r\n        <>\r\n            <Notification></Notification>\r\n            <div className='container'>\r\n                <h2>Sign in</h2>\r\n                <Form onSubmit={submit}>\r\n                    <Form.Label>username:</Form.Label>\r\n                    <Form.Control type=\"text\" id='username' style={style} value={username} name=\"username\" onChange={({ target }) => setUsername(target.value)} required />\r\n                    <Form.Label>password:</Form.Label>\r\n                    <Form.Control type=\"password\" id='password' style={style} value={password} name=\"password\" onChange={({ target }) => setPassword(target.value)} required />\r\n                    <Button id='submit' type=\"submit\">sign in</Button> or <Link to='/login'>login</Link>\r\n                </Form>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SigninForm","const reducer = (state = 'light', action) => {\r\n    switch (action.type) {\r\n        case 'SET_MODE': {\r\n            return action.data\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const setMode = (mode) => {\r\n    return async dispatch => {\r\n        dispatch({\r\n            type: 'SET_MODE',\r\n            data: mode\r\n        })\r\n    }\r\n}\r\n\r\nexport default reducer","import React from 'react'\r\nimport { Navbar, Nav, Button } from 'react-bootstrap'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport Notification from './Notification'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { setUser } from '../reducers/userReducer'\r\nimport { setToken } from '../reducers/tokenReducer'\r\nimport { setNotification } from '../reducers/notificationReducer'\r\nimport { setMode } from '../reducers/modeReducer'\r\n\r\nconst Navigationbar = () => {\r\n    const user = useSelector(state => state.user)\r\n    const mode = useSelector(state => state.mode)\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const handleLogout = () => {\r\n        window.localStorage.removeItem('user-token')\r\n        window.localStorage.removeItem('logged-user')\r\n        dispatch(setUser(null))\r\n        dispatch(setToken(''))\r\n        dispatch(setNotification({ message: 'Logged out', error: false }, 5))\r\n        history.push('/login')\r\n    }\r\n    if (user) {\r\n        return (\r\n            <>\r\n                <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n                    <Navbar.Brand href=\"\" as=\"span\">ChatForum</Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                        <Nav className=\"mr-auto\">\r\n                            <Nav.Link href=\"#\" as=\"span\">\r\n                                <Button variant=\"outline-info\" onClick={() => { history.push('/chats') }}>Chats</Button>\r\n                            </Nav.Link>\r\n                            <Nav.Link href=\"#\" as=\"span\">\r\n                                {mode === 'light' ?\r\n                                    <Button variant=\"outline-info\" onClick={() => dispatch(setMode('dark'))}>Dark mode</Button>\r\n                                    :\r\n                                    <Button variant=\"outline-info\" onClick={() => dispatch(setMode('light'))}>Light mode</Button>\r\n                                }\r\n                            </Nav.Link>\r\n                            <Nav.Link href=\"#\" as=\"span\">\r\n                                <div><Link to={`/users/${user.username}`}>{user.username}</Link> logged in <Button variant=\"outline-info\" onClick={handleLogout}>logout</Button></div>\r\n                            </Nav.Link>\r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                </Navbar>\r\n                <Notification></Notification>\r\n            </>\r\n        )\r\n    } else {\r\n        return (\r\n            <>\r\n                <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n                    <Navbar.Brand href=\"\" as=\"span\">ChatForum</Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                        <Nav className=\"mr-auto\">\r\n                            <Nav.Link href=\"#\" as=\"span\">\r\n                                {mode === 'light' ?\r\n                                    <Button variant=\"outline-info\" onClick={() => dispatch(setMode('dark'))}>Dark mode</Button>\r\n                                    :\r\n                                    <Button variant=\"outline-info\" onClick={() => dispatch(setMode('light'))}>Light mode</Button>\r\n                                }\r\n                            </Nav.Link>\r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                </Navbar>\r\n                <Notification></Notification>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navigationbar","import React from 'react'\r\nimport { Switch, Route, Redirect } from 'react-router-dom'\r\nimport LoginForm from './components/LoginForm'\r\nimport LoggedInPage from './components/LoggedInPage'\r\nimport SigninForm from './components/SigninForm'\r\nimport Navgationbar from './components/Navigationbar'\r\nimport { useSelector } from 'react-redux'\r\n\r\nconst App = () => {\r\n    const token = useSelector(state => state.token)\r\n    const mode = useSelector(state => state.mode)\r\n    const style = {\r\n        width: '100%',\r\n        height: '100%',\r\n        left: 0,\r\n        top: 0,\r\n        zIndex: 10\r\n    }\r\n    if (mode === 'light') {\r\n        document.body.style.backgroundColor = 'white'\r\n\r\n    } else {\r\n        document.body.style.backgroundColor = 'darkgray'\r\n    }\r\n    return (\r\n        <div style={style}>\r\n            <Navgationbar></Navgationbar>\r\n            <Switch>\r\n                <Route path='/signin'>\r\n                    {token ?\r\n                        <Redirect to='/chats'></Redirect>\r\n                        :\r\n                        <SigninForm></SigninForm>\r\n                    }\r\n                </Route>\r\n                <Route path='/login'>\r\n                    {token ?\r\n                        <Redirect to='/chats'></Redirect>\r\n                        :\r\n                        <LoginForm></LoginForm>\r\n                    }\r\n                </Route>\r\n                <Route path='/'>\r\n                    {token ?\r\n                        <>\r\n                            <LoggedInPage></LoggedInPage>\r\n                        </>\r\n                        :\r\n                        <Redirect to='/login'></Redirect>\r\n                    }\r\n                </Route>\r\n            </Switch>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App","import { createStore, combineReducers, applyMiddleware } from 'redux'\r\nimport notificationReducer from './reducers/notificationReducer'\r\nimport userReducer from './reducers/userReducer'\r\nimport tokenReducer from './reducers/tokenReducer'\r\nimport modeReducer from './reducers/modeReducer'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport thunk from 'redux-thunk'\r\n\r\nconst reducer = combineReducers({\r\n    notification: notificationReducer,\r\n    user: userReducer,\r\n    token: tokenReducer,\r\n    mode: modeReducer\r\n})\r\n\r\nconst store = createStore(\r\n    reducer,\r\n    composeWithDevTools(applyMiddleware(thunk))\r\n)\r\n\r\nexport default store"],"sourceRoot":""}